/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationStopConcurrency;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationTimeSlot;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Specifies the necessary information needed to schedule a stop at this location. This information is not relevant when the location is the start or end location of a vehicle.
 */
@JsonPropertyOrder({
  RouteOptimizationStopProperties.JSON_PROPERTY_PREPARATION_DURATION,
  RouteOptimizationStopProperties.JSON_PROPERTY_TIME_SLOTS,
  RouteOptimizationStopProperties.JSON_PROPERTY_CONCURRENCY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:36:04.652949222Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationStopProperties {
  public static final String JSON_PROPERTY_PREPARATION_DURATION = "preparationDuration";
  private Integer preparationDuration = 0;

  public static final String JSON_PROPERTY_TIME_SLOTS = "timeSlots";
  private List<RouteOptimizationTimeSlot> timeSlots = new ArrayList<>();

  public static final String JSON_PROPERTY_CONCURRENCY = "concurrency";
  private RouteOptimizationStopConcurrency concurrency;

  public RouteOptimizationStopProperties() { 
  }

  public RouteOptimizationStopProperties preparationDuration(Integer preparationDuration) {
    this.preparationDuration = preparationDuration;
    return this;
  }

   /**
   * Defines a duration [s] that is needed before an appointment (one or more tasks) can start at this location. This duration is needed once per stop whenever tasks are executed.
   * minimum: 0
   * @return preparationDuration
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREPARATION_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPreparationDuration() {
    return preparationDuration;
  }


  @JsonProperty(JSON_PROPERTY_PREPARATION_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreparationDuration(Integer preparationDuration) {
    this.preparationDuration = preparationDuration;
  }


  public RouteOptimizationStopProperties timeSlots(List<RouteOptimizationTimeSlot> timeSlots) {
    this.timeSlots = timeSlots;
    return this;
  }

  public RouteOptimizationStopProperties addTimeSlotsItem(RouteOptimizationTimeSlot timeSlotsItem) {
    if (this.timeSlots == null) {
      this.timeSlots = new ArrayList<>();
    }
    this.timeSlots.add(timeSlotsItem);
    return this;
  }

   /**
   * A list of time intervals that describe when tasks can be executed at this location. Consecutive tasks with the same time slot are grouped to an appointment. The timings of the appointment must satisfy the restrictions of the time slot. When omitted or empty, all tasks within a stop at this location will be grouped into one appointment and the timings of this appointment are unrestricted.
   * @return timeSlots
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_SLOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RouteOptimizationTimeSlot> getTimeSlots() {
    return timeSlots;
  }


  @JsonProperty(JSON_PROPERTY_TIME_SLOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeSlots(List<RouteOptimizationTimeSlot> timeSlots) {
    this.timeSlots = timeSlots;
  }


  public RouteOptimizationStopProperties concurrency(RouteOptimizationStopConcurrency concurrency) {
    this.concurrency = concurrency;
    return this;
  }

   /**
   * Get concurrency
   * @return concurrency
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RouteOptimizationStopConcurrency getConcurrency() {
    return concurrency;
  }


  @JsonProperty(JSON_PROPERTY_CONCURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcurrency(RouteOptimizationStopConcurrency concurrency) {
    this.concurrency = concurrency;
  }


  /**
   * Return true if this StopProperties object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationStopProperties stopProperties = (RouteOptimizationStopProperties) o;
    return Objects.equals(this.preparationDuration, stopProperties.preparationDuration) &&
        Objects.equals(this.timeSlots, stopProperties.timeSlots) &&
        Objects.equals(this.concurrency, stopProperties.concurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(preparationDuration, timeSlots, concurrency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationStopProperties {\n");
    sb.append("    preparationDuration: ").append(toIndentedString(preparationDuration)).append("\n");
    sb.append("    timeSlots: ").append(toIndentedString(timeSlots)).append("\n");
    sb.append("    concurrency: ").append(toIndentedString(concurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `preparationDuration` to the URL query string
    if (getPreparationDuration() != null) {
      joiner.add(String.format("%spreparationDuration%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreparationDuration()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `timeSlots` to the URL query string
    if (getTimeSlots() != null) {
      for (int i = 0; i < getTimeSlots().size(); i++) {
        if (getTimeSlots().get(i) != null) {
          joiner.add(getTimeSlots().get(i).toUrlQueryString(String.format("%stimeSlots%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `concurrency` to the URL query string
    if (getConcurrency() != null) {
      joiner.add(getConcurrency().toUrlQueryString(prefix + "concurrency" + suffix));
    }

    return joiner.toString();
  }
}

