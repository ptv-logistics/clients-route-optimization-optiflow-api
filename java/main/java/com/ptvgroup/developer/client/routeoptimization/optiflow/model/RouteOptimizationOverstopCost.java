/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Specifies an increased cost per stop if the number of stops of a route exceeds a threshold.
 */
@JsonPropertyOrder({
  RouteOptimizationOverstopCost.JSON_PROPERTY_THRESHOLD,
  RouteOptimizationOverstopCost.JSON_PROPERTY_EXTRA_PER_STOP
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-03T08:03:45.906081716Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationOverstopCost {
  public static final String JSON_PROPERTY_THRESHOLD = "threshold";
  private Integer threshold;

  public static final String JSON_PROPERTY_EXTRA_PER_STOP = "extraPerStop";
  private Double extraPerStop;

  public RouteOptimizationOverstopCost() { 
  }

  public RouteOptimizationOverstopCost threshold(Integer threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * The threshold for the route&#39;s number of stops above which the extra cost per stop applies.
   * minimum: 0
   * @return threshold
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getThreshold() {
    return threshold;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThreshold(Integer threshold) {
    this.threshold = threshold;
  }


  public RouteOptimizationOverstopCost extraPerStop(Double extraPerStop) {
    this.extraPerStop = extraPerStop;
    return this;
  }

   /**
   * Specifies the extra cost for every stop above the threshold.
   * minimum: 0
   * @return extraPerStop
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTRA_PER_STOP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getExtraPerStop() {
    return extraPerStop;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_PER_STOP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExtraPerStop(Double extraPerStop) {
    this.extraPerStop = extraPerStop;
  }


  /**
   * Return true if this OverstopCost object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationOverstopCost overstopCost = (RouteOptimizationOverstopCost) o;
    return Objects.equals(this.threshold, overstopCost.threshold) &&
        Objects.equals(this.extraPerStop, overstopCost.extraPerStop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(threshold, extraPerStop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationOverstopCost {\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    extraPerStop: ").append(toIndentedString(extraPerStop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `threshold` to the URL query string
    if (getThreshold() != null) {
      joiner.add(String.format("%sthreshold%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreshold()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `extraPerStop` to the URL query string
    if (getExtraPerStop() != null) {
      joiner.add(String.format("%sextraPerStop%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExtraPerStop()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

