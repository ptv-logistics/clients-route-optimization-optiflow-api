/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationDurationModifier;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationLocationRuleCondition;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A rule that conditionally modifies location properties.
 */
@JsonPropertyOrder({
  RouteOptimizationLocationRule.JSON_PROPERTY_CONDITIONS,
  RouteOptimizationLocationRule.JSON_PROPERTY_PREPARATION_DURATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-22T09:26:27.555614916Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationLocationRule {
  public static final String JSON_PROPERTY_CONDITIONS = "conditions";
  private List<RouteOptimizationLocationRuleCondition> conditions = new ArrayList<>();

  public static final String JSON_PROPERTY_PREPARATION_DURATION = "preparationDuration";
  private RouteOptimizationDurationModifier preparationDuration;

  public RouteOptimizationLocationRule() { 
  }

  public RouteOptimizationLocationRule conditions(List<RouteOptimizationLocationRuleCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public RouteOptimizationLocationRule addConditionsItem(RouteOptimizationLocationRuleCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * A list of conditions that describes when the rule applies. The rule applies if any of the conditions are met. A condition is met if all of its properties are matched.
   * @return conditions
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<RouteOptimizationLocationRuleCondition> getConditions() {
    return conditions;
  }


  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConditions(List<RouteOptimizationLocationRuleCondition> conditions) {
    this.conditions = conditions;
  }


  public RouteOptimizationLocationRule preparationDuration(RouteOptimizationDurationModifier preparationDuration) {
    this.preparationDuration = preparationDuration;
    return this;
  }

   /**
   * Get preparationDuration
   * @return preparationDuration
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PREPARATION_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RouteOptimizationDurationModifier getPreparationDuration() {
    return preparationDuration;
  }


  @JsonProperty(JSON_PROPERTY_PREPARATION_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreparationDuration(RouteOptimizationDurationModifier preparationDuration) {
    this.preparationDuration = preparationDuration;
  }


  /**
   * Return true if this LocationRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationLocationRule locationRule = (RouteOptimizationLocationRule) o;
    return Objects.equals(this.conditions, locationRule.conditions) &&
        Objects.equals(this.preparationDuration, locationRule.preparationDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, preparationDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationLocationRule {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    preparationDuration: ").append(toIndentedString(preparationDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `conditions` to the URL query string
    if (getConditions() != null) {
      for (int i = 0; i < getConditions().size(); i++) {
        if (getConditions().get(i) != null) {
          joiner.add(getConditions().get(i).toUrlQueryString(String.format("%sconditions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `preparationDuration` to the URL query string
    if (getPreparationDuration() != null) {
      joiner.add(getPreparationDuration().toUrlQueryString(prefix + "preparationDuration" + suffix));
    }

    return joiner.toString();
  }
}

