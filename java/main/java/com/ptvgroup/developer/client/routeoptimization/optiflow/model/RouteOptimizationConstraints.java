/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationCombinationConstraints;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationOrderConstraints;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationTaskConstraints;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Constraints that should be taken into account by optimization.
 */
@JsonPropertyOrder({
  RouteOptimizationConstraints.JSON_PROPERTY_COMBINATIONS,
  RouteOptimizationConstraints.JSON_PROPERTY_ORDERS,
  RouteOptimizationConstraints.JSON_PROPERTY_TASKS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-22T09:26:27.555614916Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationConstraints {
  public static final String JSON_PROPERTY_COMBINATIONS = "combinations";
  private RouteOptimizationCombinationConstraints combinations;

  public static final String JSON_PROPERTY_ORDERS = "orders";
  private RouteOptimizationOrderConstraints orders;

  public static final String JSON_PROPERTY_TASKS = "tasks";
  private RouteOptimizationTaskConstraints tasks;

  public RouteOptimizationConstraints() { 
  }

  public RouteOptimizationConstraints combinations(RouteOptimizationCombinationConstraints combinations) {
    this.combinations = combinations;
    return this;
  }

   /**
   * Get combinations
   * @return combinations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMBINATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RouteOptimizationCombinationConstraints getCombinations() {
    return combinations;
  }


  @JsonProperty(JSON_PROPERTY_COMBINATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCombinations(RouteOptimizationCombinationConstraints combinations) {
    this.combinations = combinations;
  }


  public RouteOptimizationConstraints orders(RouteOptimizationOrderConstraints orders) {
    this.orders = orders;
    return this;
  }

   /**
   * Get orders
   * @return orders
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RouteOptimizationOrderConstraints getOrders() {
    return orders;
  }


  @JsonProperty(JSON_PROPERTY_ORDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrders(RouteOptimizationOrderConstraints orders) {
    this.orders = orders;
  }


  public RouteOptimizationConstraints tasks(RouteOptimizationTaskConstraints tasks) {
    this.tasks = tasks;
    return this;
  }

   /**
   * Get tasks
   * @return tasks
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RouteOptimizationTaskConstraints getTasks() {
    return tasks;
  }


  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTasks(RouteOptimizationTaskConstraints tasks) {
    this.tasks = tasks;
  }


  /**
   * Return true if this Constraints object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationConstraints constraints = (RouteOptimizationConstraints) o;
    return Objects.equals(this.combinations, constraints.combinations) &&
        Objects.equals(this.orders, constraints.orders) &&
        Objects.equals(this.tasks, constraints.tasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(combinations, orders, tasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationConstraints {\n");
    sb.append("    combinations: ").append(toIndentedString(combinations)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `combinations` to the URL query string
    if (getCombinations() != null) {
      joiner.add(getCombinations().toUrlQueryString(prefix + "combinations" + suffix));
    }

    // add `orders` to the URL query string
    if (getOrders() != null) {
      joiner.add(getOrders().toUrlQueryString(prefix + "orders" + suffix));
    }

    // add `tasks` to the URL query string
    if (getTasks() != null) {
      joiner.add(getTasks().toUrlQueryString(prefix + "tasks" + suffix));
    }

    return joiner.toString();
  }
}

