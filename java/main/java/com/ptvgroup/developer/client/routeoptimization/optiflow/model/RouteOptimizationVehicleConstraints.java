/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationLoad;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationRouteConstraints;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Defines constraints on the tasks that can be executed with the vehicle.
 */
@JsonPropertyOrder({
  RouteOptimizationVehicleConstraints.JSON_PROPERTY_MAXIMUM_LOADS,
  RouteOptimizationVehicleConstraints.JSON_PROPERTY_ROUTE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-02T08:00:16.777658760Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationVehicleConstraints {
  public static final String JSON_PROPERTY_MAXIMUM_LOADS = "maximumLoads";
  private List<RouteOptimizationLoad> maximumLoads = new ArrayList<>();

  public static final String JSON_PROPERTY_ROUTE = "route";
  private RouteOptimizationRouteConstraints route;

  public RouteOptimizationVehicleConstraints() { 
  }

  public RouteOptimizationVehicleConstraints maximumLoads(List<RouteOptimizationLoad> maximumLoads) {
    this.maximumLoads = maximumLoads;
    return this;
  }

  public RouteOptimizationVehicleConstraints addMaximumLoadsItem(RouteOptimizationLoad maximumLoadsItem) {
    if (this.maximumLoads == null) {
      this.maximumLoads = new ArrayList<>();
    }
    this.maximumLoads.add(maximumLoadsItem);
    return this;
  }

   /**
   * A list of load dimensions that describe the capacity of the vehicle. For each dimension specified in this list, the sum of the values of the orders loaded in the vehicle must be lower than or equal to the value of the vehicle. For unspecified dimensions, the load of the vehicle is assumed to be unconstrained for this dimension.
   * @return maximumLoads
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAXIMUM_LOADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RouteOptimizationLoad> getMaximumLoads() {
    return maximumLoads;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_LOADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumLoads(List<RouteOptimizationLoad> maximumLoads) {
    this.maximumLoads = maximumLoads;
  }


  public RouteOptimizationVehicleConstraints route(RouteOptimizationRouteConstraints route) {
    this.route = route;
    return this;
  }

   /**
   * Get route
   * @return route
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RouteOptimizationRouteConstraints getRoute() {
    return route;
  }


  @JsonProperty(JSON_PROPERTY_ROUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoute(RouteOptimizationRouteConstraints route) {
    this.route = route;
  }


  /**
   * Return true if this VehicleConstraints object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationVehicleConstraints vehicleConstraints = (RouteOptimizationVehicleConstraints) o;
    return Objects.equals(this.maximumLoads, vehicleConstraints.maximumLoads) &&
        Objects.equals(this.route, vehicleConstraints.route);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maximumLoads, route);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationVehicleConstraints {\n");
    sb.append("    maximumLoads: ").append(toIndentedString(maximumLoads)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `maximumLoads` to the URL query string
    if (getMaximumLoads() != null) {
      for (int i = 0; i < getMaximumLoads().size(); i++) {
        if (getMaximumLoads().get(i) != null) {
          joiner.add(getMaximumLoads().get(i).toUrlQueryString(String.format("%smaximumLoads%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `route` to the URL query string
    if (getRoute() != null) {
      joiner.add(getRoute().toUrlQueryString(prefix + "route" + suffix));
    }

    return joiner.toString();
  }
}

