/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationOrderProperties;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationTaskProperties;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * An order to deliver goods, which are picked up from a depot.
 */
@JsonPropertyOrder({
  RouteOptimizationDeliveryOrder.JSON_PROPERTY_ID,
  RouteOptimizationDeliveryOrder.JSON_PROPERTY_DELIVERY,
  RouteOptimizationDeliveryOrder.JSON_PROPERTY_PROPERTIES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:36:04.652949222Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationDeliveryOrder {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_DELIVERY = "delivery";
  private RouteOptimizationTaskProperties delivery;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private RouteOptimizationOrderProperties properties;

  public RouteOptimizationDeliveryOrder() { 
  }

  public RouteOptimizationDeliveryOrder id(String id) {
    this.id = id;
    return this;
  }

   /**
   * A unique identifier of the order. This must be unique across all orders.
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public RouteOptimizationDeliveryOrder delivery(RouteOptimizationTaskProperties delivery) {
    this.delivery = delivery;
    return this;
  }

   /**
   * Get delivery
   * @return delivery
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELIVERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RouteOptimizationTaskProperties getDelivery() {
    return delivery;
  }


  @JsonProperty(JSON_PROPERTY_DELIVERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDelivery(RouteOptimizationTaskProperties delivery) {
    this.delivery = delivery;
  }


  public RouteOptimizationDeliveryOrder properties(RouteOptimizationOrderProperties properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RouteOptimizationOrderProperties getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(RouteOptimizationOrderProperties properties) {
    this.properties = properties;
  }


  /**
   * Return true if this DeliveryOrder object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationDeliveryOrder deliveryOrder = (RouteOptimizationDeliveryOrder) o;
    return Objects.equals(this.id, deliveryOrder.id) &&
        Objects.equals(this.delivery, deliveryOrder.delivery) &&
        Objects.equals(this.properties, deliveryOrder.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, delivery, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationDeliveryOrder {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `delivery` to the URL query string
    if (getDelivery() != null) {
      joiner.add(getDelivery().toUrlQueryString(prefix + "delivery" + suffix));
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      joiner.add(getProperties().toUrlQueryString(prefix + "properties" + suffix));
    }

    return joiner.toString();
  }
}

