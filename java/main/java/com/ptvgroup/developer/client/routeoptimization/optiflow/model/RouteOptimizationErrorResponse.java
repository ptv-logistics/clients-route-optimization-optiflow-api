/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationCausingError;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RouteOptimizationErrorResponse
 */
@JsonPropertyOrder({
  RouteOptimizationErrorResponse.JSON_PROPERTY_TRACE_ID,
  RouteOptimizationErrorResponse.JSON_PROPERTY_ERROR_ID,
  RouteOptimizationErrorResponse.JSON_PROPERTY_DESCRIPTION,
  RouteOptimizationErrorResponse.JSON_PROPERTY_ERROR_CODE,
  RouteOptimizationErrorResponse.JSON_PROPERTY_CAUSES,
  RouteOptimizationErrorResponse.JSON_PROPERTY_DETAILS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:36:04.652949222Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationErrorResponse {
  public static final String JSON_PROPERTY_TRACE_ID = "traceId";
  private String traceId;

  public static final String JSON_PROPERTY_ERROR_ID = "errorId";
  private String errorId;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ERROR_CODE = "errorCode";
  private String errorCode;

  public static final String JSON_PROPERTY_CAUSES = "causes";
  private List<RouteOptimizationCausingError> causes = new ArrayList<>();

  public static final String JSON_PROPERTY_DETAILS = "details";
  private Map<String, Object> details = new HashMap<>();

  public RouteOptimizationErrorResponse() { 
  }

  public RouteOptimizationErrorResponse traceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

   /**
   * A unique identifier of the corresponding trace forest. It can be used to trace errors by the support.
   * @return traceId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRACE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTraceId() {
    return traceId;
  }


  @JsonProperty(JSON_PROPERTY_TRACE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTraceId(String traceId) {
    this.traceId = traceId;
  }


  public RouteOptimizationErrorResponse errorId(String errorId) {
    this.errorId = errorId;
    return this;
  }

   /**
   * A unique identifier specific to this error instance. It can be used to trace errors by the support.
   * @return errorId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorId() {
    return errorId;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorId(String errorId) {
    this.errorId = errorId;
  }


  public RouteOptimizationErrorResponse description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A human readable message that describes the error.
   * @return description
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public RouteOptimizationErrorResponse errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * A constant string that can be used to identify this error class programmatically.  If additional information is available for an errorCode, it will be provided as key-value pairs with the parameter **details**. The keys available for a specific errorCode are documented directly with the errorCode. Unless stated otherwise, the values are of type string.  As an example, the following errorCode provides one key-value pair in the **details**. The key is called **message**. * &#x60;GENERAL_UNAUTHENTICATED&#x60; - Invalid or missing authentication credentials.   * &#x60;message&#x60; - An additional error message.  Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **HTTP status code: 400** * &#x60;GENERAL_VALIDATION_ERROR&#x60; - The validation of the request failed. Details can be found in **causes**. * &#x60;GENERAL_PARSING_ERROR&#x60; - The JSON syntax is invalid.  **HTTP status code: 401** * &#x60;GENERAL_UNAUTHENTICATED&#x60; - Invalid or missing authentication credentials.   * &#x60;message&#x60; - An additional error message.  **HTTP status code: 403** * &#x60;GENERAL_FORBIDDEN&#x60; - Insufficient access rights. * &#x60;GENERAL_QUOTA_EXCEEDED&#x60; - The transaction limit is exceeded.   * &#x60;message&#x60; - An additional error message. * &#x60;ROUTE_OPTIMIZATION_RESTRICTION_EXCEEDED&#x60; - A product-specific restriction is exceeded.  **HTTP status code: 404** * &#x60;GENERAL_RESOURCE_NOT_FOUND&#x60; - A requested resource does not exist.   * &#x60;message&#x60; - An additional error message.  **HTTP status code: 413** * &#x60;GENERAL_CONTENT_TOO_LARGE&#x60; - The request is too large.   * &#x60;limit&#x60; - The maximum size of the request.  **HTTP status code: 415** * &#x60;GENERAL_UNSUPPORTED_MEDIA_TYPE&#x60; - The content format of the request is not supported. Details can be found in &#39;causes&#39;.  **HTTP status code: 429** * &#x60;GENERAL_RATE_LIMIT_EXCEEDED&#x60; - The rate limit is exceeded.  **HTTP status code: 500** * &#x60;GENERAL_INTERNAL_SERVER_ERROR&#x60; - The request could not be processed due to an internal error.   * &#x60;message&#x60; - An additional error message.   * &#x60;hint&#x60; - A hint how to solve the problem.  **HTTP status code: 503** * &#x60;GENERAL_SERVICE_UNAVAILABLE&#x60; - The service is temporarily unavailable.  **HTTP status code: 4xx-5xx**  * &#x60;GENERAL_INTERNAL_GATEWAY_ERROR&#x60; - The request could not be processed due to an internal gateway error.   * &#x60;hint&#x60; - A hint how to solve the problem.
   * @return errorCode
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getErrorCode() {
    return errorCode;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public RouteOptimizationErrorResponse causes(List<RouteOptimizationCausingError> causes) {
    this.causes = causes;
    return this;
  }

  public RouteOptimizationErrorResponse addCausesItem(RouteOptimizationCausingError causesItem) {
    if (this.causes == null) {
      this.causes = new ArrayList<>();
    }
    this.causes.add(causesItem);
    return this;
  }

   /**
   * A list of affected parameters and/or properties that caused this error.
   * @return causes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAUSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RouteOptimizationCausingError> getCauses() {
    return causes;
  }


  @JsonProperty(JSON_PROPERTY_CAUSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCauses(List<RouteOptimizationCausingError> causes) {
    this.causes = causes;
  }


  public RouteOptimizationErrorResponse details(Map<String, Object> details) {
    this.details = details;
    return this;
  }

  public RouteOptimizationErrorResponse putDetailsItem(String key, Object detailsItem) {
    if (this.details == null) {
      this.details = new HashMap<>();
    }
    this.details.put(key, detailsItem);
    return this;
  }

   /**
   * Additional properties specific to this error class.
   * @return details
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getDetails() {
    return details;
  }


  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetails(Map<String, Object> details) {
    this.details = details;
  }


  /**
   * Return true if this ErrorResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationErrorResponse errorResponse = (RouteOptimizationErrorResponse) o;
    return Objects.equals(this.traceId, errorResponse.traceId) &&
        Objects.equals(this.errorId, errorResponse.errorId) &&
        Objects.equals(this.description, errorResponse.description) &&
        Objects.equals(this.errorCode, errorResponse.errorCode) &&
        Objects.equals(this.causes, errorResponse.causes) &&
        Objects.equals(this.details, errorResponse.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(traceId, errorId, description, errorCode, causes, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationErrorResponse {\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("    errorId: ").append(toIndentedString(errorId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    causes: ").append(toIndentedString(causes)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `traceId` to the URL query string
    if (getTraceId() != null) {
      joiner.add(String.format("%straceId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTraceId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `errorId` to the URL query string
    if (getErrorId() != null) {
      joiner.add(String.format("%serrorId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getErrorId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `errorCode` to the URL query string
    if (getErrorCode() != null) {
      joiner.add(String.format("%serrorCode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getErrorCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `causes` to the URL query string
    if (getCauses() != null) {
      for (int i = 0; i < getCauses().size(); i++) {
        if (getCauses().get(i) != null) {
          joiner.add(getCauses().get(i).toUrlQueryString(String.format("%scauses%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `details` to the URL query string
    if (getDetails() != null) {
      for (String _key : getDetails().keySet()) {
        joiner.add(String.format("%sdetails%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getDetails().get(_key), URLEncoder.encode(String.valueOf(getDetails().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

