/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationLoad;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Information about the order.
 */
@JsonPropertyOrder({
  RouteOptimizationOrderProperties.JSON_PROPERTY_LOADS,
  RouteOptimizationOrderProperties.JSON_PROPERTY_REPOSITIONING_EFFORT,
  RouteOptimizationOrderProperties.JSON_PROPERTY_OUTSOURCING_COST,
  RouteOptimizationOrderProperties.JSON_PROPERTY_CATEGORIES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-09T08:40:59.150506716Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationOrderProperties {
  public static final String JSON_PROPERTY_LOADS = "loads";
  private List<RouteOptimizationLoad> loads = new ArrayList<>();

  public static final String JSON_PROPERTY_REPOSITIONING_EFFORT = "repositioningEffort";
  private Integer repositioningEffort = 0;

  public static final String JSON_PROPERTY_OUTSOURCING_COST = "outsourcingCost";
  private Double outsourcingCost;

  public static final String JSON_PROPERTY_CATEGORIES = "categories";
  private List<String> categories = new ArrayList<>();

  public RouteOptimizationOrderProperties() { 
  }

  public RouteOptimizationOrderProperties loads(List<RouteOptimizationLoad> loads) {
    this.loads = loads;
    return this;
  }

  public RouteOptimizationOrderProperties addLoadsItem(RouteOptimizationLoad loadsItem) {
    if (this.loads == null) {
      this.loads = new ArrayList<>();
    }
    this.loads.add(loadsItem);
    return this;
  }

   /**
   * A list of load definitions that describe the necessary vehicle capacity to transport the order. For each dimension, the sum of the values of orders loaded into the vehicle must be lower than or equal to the value of the vehicle.
   * @return loads
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RouteOptimizationLoad> getLoads() {
    return loads;
  }


  @JsonProperty(JSON_PROPERTY_LOADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoads(List<RouteOptimizationLoad> loads) {
    this.loads = loads;
  }


  public RouteOptimizationOrderProperties repositioningEffort(Integer repositioningEffort) {
    this.repositioningEffort = repositioningEffort;
    return this;
  }

   /**
   * When two orders are loaded into the same compartment and delivered in the same order, we refer to them as a non-last-in-first-out (non-LIFO) pair. Any non-LIFO pair of orders requires repositioning in the vehicle, as the last picked-up order obstructs the first order that needs to be delivered. The effort involved in this repositioning is the minimum effort required for the two orders. The total repositioning effort for the route is the sum of the repositioning efforts for all non-LIFO pairs of orders.
   * minimum: 0
   * @return repositioningEffort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPOSITIONING_EFFORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRepositioningEffort() {
    return repositioningEffort;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITIONING_EFFORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepositioningEffort(Integer repositioningEffort) {
    this.repositioningEffort = repositioningEffort;
  }


  public RouteOptimizationOrderProperties outsourcingCost(Double outsourcingCost) {
    this.outsourcingCost = outsourcingCost;
    return this;
  }

   /**
   * Defines the cost for not scheduling the order on a route. This cost is weighed against the cost of scheduling the order on a route. When omitted the optimization will try to schedule the order regardless of the added cost.
   * minimum: 0
   * @return outsourcingCost
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTSOURCING_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getOutsourcingCost() {
    return outsourcingCost;
  }


  @JsonProperty(JSON_PROPERTY_OUTSOURCING_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutsourcingCost(Double outsourcingCost) {
    this.outsourcingCost = outsourcingCost;
  }


  public RouteOptimizationOrderProperties categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public RouteOptimizationOrderProperties addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * A list of categories the order belongs to that can be used to describe constraints or rules.
   * @return categories
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCategories() {
    return categories;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  /**
   * Return true if this OrderProperties object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationOrderProperties orderProperties = (RouteOptimizationOrderProperties) o;
    return Objects.equals(this.loads, orderProperties.loads) &&
        Objects.equals(this.repositioningEffort, orderProperties.repositioningEffort) &&
        Objects.equals(this.outsourcingCost, orderProperties.outsourcingCost) &&
        Objects.equals(this.categories, orderProperties.categories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loads, repositioningEffort, outsourcingCost, categories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationOrderProperties {\n");
    sb.append("    loads: ").append(toIndentedString(loads)).append("\n");
    sb.append("    repositioningEffort: ").append(toIndentedString(repositioningEffort)).append("\n");
    sb.append("    outsourcingCost: ").append(toIndentedString(outsourcingCost)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `loads` to the URL query string
    if (getLoads() != null) {
      for (int i = 0; i < getLoads().size(); i++) {
        if (getLoads().get(i) != null) {
          joiner.add(getLoads().get(i).toUrlQueryString(String.format("%sloads%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `repositioningEffort` to the URL query string
    if (getRepositioningEffort() != null) {
      joiner.add(String.format("%srepositioningEffort%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRepositioningEffort()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `outsourcingCost` to the URL query string
    if (getOutsourcingCost() != null) {
      joiner.add(String.format("%soutsourcingCost%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutsourcingCost()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `categories` to the URL query string
    if (getCategories() != null) {
      for (int i = 0; i < getCategories().size(); i++) {
        joiner.add(String.format("%scategories%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getCategories().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

