/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Describes a constraint where orders are forbidden to be loaded or unloaded while other orders are loaded in the vehicle.
 */
@JsonPropertyOrder({
  RouteOptimizationOrderLoadingIncompatibilityConstraint.JSON_PROPERTY_LOADED_ORDER_CATEGORY,
  RouteOptimizationOrderLoadingIncompatibilityConstraint.JSON_PROPERTY_FORBIDDEN_ORDER_CATEGORY,
  RouteOptimizationOrderLoadingIncompatibilityConstraint.JSON_PROPERTY_VEHICLE_CATEGORY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-02T08:00:16.777658760Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationOrderLoadingIncompatibilityConstraint {
  public static final String JSON_PROPERTY_LOADED_ORDER_CATEGORY = "loadedOrderCategory";
  private String loadedOrderCategory;

  public static final String JSON_PROPERTY_FORBIDDEN_ORDER_CATEGORY = "forbiddenOrderCategory";
  private String forbiddenOrderCategory;

  public static final String JSON_PROPERTY_VEHICLE_CATEGORY = "vehicleCategory";
  private String vehicleCategory;

  public RouteOptimizationOrderLoadingIncompatibilityConstraint() { 
  }

  public RouteOptimizationOrderLoadingIncompatibilityConstraint loadedOrderCategory(String loadedOrderCategory) {
    this.loadedOrderCategory = loadedOrderCategory;
    return this;
  }

   /**
   * Orders belonging to this category must be loaded in the vehicle for this constraint to apply. The constraint will be ignored when no order belongs to this category.
   * @return loadedOrderCategory
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOADED_ORDER_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLoadedOrderCategory() {
    return loadedOrderCategory;
  }


  @JsonProperty(JSON_PROPERTY_LOADED_ORDER_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLoadedOrderCategory(String loadedOrderCategory) {
    this.loadedOrderCategory = loadedOrderCategory;
  }


  public RouteOptimizationOrderLoadingIncompatibilityConstraint forbiddenOrderCategory(String forbiddenOrderCategory) {
    this.forbiddenOrderCategory = forbiddenOrderCategory;
    return this;
  }

   /**
   * Orders belonging to this category cannot be loaded or unloaded while the constraint applies. The constraint will be ignored when no order belongs to this category.
   * @return forbiddenOrderCategory
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FORBIDDEN_ORDER_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getForbiddenOrderCategory() {
    return forbiddenOrderCategory;
  }


  @JsonProperty(JSON_PROPERTY_FORBIDDEN_ORDER_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setForbiddenOrderCategory(String forbiddenOrderCategory) {
    this.forbiddenOrderCategory = forbiddenOrderCategory;
  }


  public RouteOptimizationOrderLoadingIncompatibilityConstraint vehicleCategory(String vehicleCategory) {
    this.vehicleCategory = vehicleCategory;
    return this;
  }

   /**
   * The category of vehicles to which this constraint applies. When omitted the constraint applies to all vehicles. The constraint will be ignored when no vehicle belongs to this category.
   * @return vehicleCategory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VEHICLE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVehicleCategory() {
    return vehicleCategory;
  }


  @JsonProperty(JSON_PROPERTY_VEHICLE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVehicleCategory(String vehicleCategory) {
    this.vehicleCategory = vehicleCategory;
  }


  /**
   * Return true if this OrderLoadingIncompatibilityConstraint object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationOrderLoadingIncompatibilityConstraint orderLoadingIncompatibilityConstraint = (RouteOptimizationOrderLoadingIncompatibilityConstraint) o;
    return Objects.equals(this.loadedOrderCategory, orderLoadingIncompatibilityConstraint.loadedOrderCategory) &&
        Objects.equals(this.forbiddenOrderCategory, orderLoadingIncompatibilityConstraint.forbiddenOrderCategory) &&
        Objects.equals(this.vehicleCategory, orderLoadingIncompatibilityConstraint.vehicleCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loadedOrderCategory, forbiddenOrderCategory, vehicleCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationOrderLoadingIncompatibilityConstraint {\n");
    sb.append("    loadedOrderCategory: ").append(toIndentedString(loadedOrderCategory)).append("\n");
    sb.append("    forbiddenOrderCategory: ").append(toIndentedString(forbiddenOrderCategory)).append("\n");
    sb.append("    vehicleCategory: ").append(toIndentedString(vehicleCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `loadedOrderCategory` to the URL query string
    if (getLoadedOrderCategory() != null) {
      joiner.add(String.format("%sloadedOrderCategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLoadedOrderCategory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `forbiddenOrderCategory` to the URL query string
    if (getForbiddenOrderCategory() != null) {
      joiner.add(String.format("%sforbiddenOrderCategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getForbiddenOrderCategory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `vehicleCategory` to the URL query string
    if (getVehicleCategory() != null) {
      joiner.add(String.format("%svehicleCategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVehicleCategory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

