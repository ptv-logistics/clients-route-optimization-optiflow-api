/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Specifies an increased cost per effort if the route&#39;s repositioning effort goes above a threshold. When two orders are loaded into the same compartment and delivered in the reverse order, we refer to them as a non-last-in-first-out (non-LIFO) pair. Any non-LIFO pair of orders requires repositioning in the vehicle, as the last picked-up order obstructs the first order that needs to be delivered. The effort involved in this repositioning is the minimum effort required for the two orders. The total repositioning effort for the route is the sum of the repositioning efforts for all non-LIFO pairs of orders.
 */
@JsonPropertyOrder({
  RouteOptimizationRepositioningEffortCost.JSON_PROPERTY_THRESHOLD,
  RouteOptimizationRepositioningEffortCost.JSON_PROPERTY_EXTRA_PER_EFFORT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-09T08:40:59.150506716Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationRepositioningEffortCost {
  public static final String JSON_PROPERTY_THRESHOLD = "threshold";
  private Integer threshold;

  public static final String JSON_PROPERTY_EXTRA_PER_EFFORT = "extraPerEffort";
  private Double extraPerEffort;

  public RouteOptimizationRepositioningEffortCost() { 
  }

  public RouteOptimizationRepositioningEffortCost threshold(Integer threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * The threshold for the repositioning effort from which the cost per effort applies.
   * minimum: 0
   * @return threshold
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getThreshold() {
    return threshold;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThreshold(Integer threshold) {
    this.threshold = threshold;
  }


  public RouteOptimizationRepositioningEffortCost extraPerEffort(Double extraPerEffort) {
    this.extraPerEffort = extraPerEffort;
    return this;
  }

   /**
   * Specifies the extra cost for every unit of effort above the threshold. If the threshold of multiple repositioning effort costs is exceeded, the extra costs per effort are added.
   * minimum: 0
   * @return extraPerEffort
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTRA_PER_EFFORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getExtraPerEffort() {
    return extraPerEffort;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_PER_EFFORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExtraPerEffort(Double extraPerEffort) {
    this.extraPerEffort = extraPerEffort;
  }


  /**
   * Return true if this RepositioningEffortCost object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationRepositioningEffortCost repositioningEffortCost = (RouteOptimizationRepositioningEffortCost) o;
    return Objects.equals(this.threshold, repositioningEffortCost.threshold) &&
        Objects.equals(this.extraPerEffort, repositioningEffortCost.extraPerEffort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(threshold, extraPerEffort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationRepositioningEffortCost {\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    extraPerEffort: ").append(toIndentedString(extraPerEffort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `threshold` to the URL query string
    if (getThreshold() != null) {
      joiner.add(String.format("%sthreshold%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreshold()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `extraPerEffort` to the URL query string
    if (getExtraPerEffort() != null) {
      joiner.add(String.format("%sextraPerEffort%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExtraPerEffort()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

