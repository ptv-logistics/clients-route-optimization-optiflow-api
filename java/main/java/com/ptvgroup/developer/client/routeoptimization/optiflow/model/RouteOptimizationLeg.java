/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationBreak;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A section of a route where a vehicle travels from one location to another.
 */
@JsonPropertyOrder({
  RouteOptimizationLeg.JSON_PROPERTY_START_LOCATION_ID,
  RouteOptimizationLeg.JSON_PROPERTY_DEPARTURE,
  RouteOptimizationLeg.JSON_PROPERTY_END_LOCATION_ID,
  RouteOptimizationLeg.JSON_PROPERTY_ARRIVAL,
  RouteOptimizationLeg.JSON_PROPERTY_BREAKS,
  RouteOptimizationLeg.JSON_PROPERTY_DISTANCE,
  RouteOptimizationLeg.JSON_PROPERTY_DRIVING_DURATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:36:04.652949222Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationLeg {
  public static final String JSON_PROPERTY_START_LOCATION_ID = "startLocationId";
  private String startLocationId;

  public static final String JSON_PROPERTY_DEPARTURE = "departure";
  private OffsetDateTime departure;

  public static final String JSON_PROPERTY_END_LOCATION_ID = "endLocationId";
  private String endLocationId;

  public static final String JSON_PROPERTY_ARRIVAL = "arrival";
  private OffsetDateTime arrival;

  public static final String JSON_PROPERTY_BREAKS = "breaks";
  private List<RouteOptimizationBreak> breaks = new ArrayList<>();

  public static final String JSON_PROPERTY_DISTANCE = "distance";
  private Integer distance;

  public static final String JSON_PROPERTY_DRIVING_DURATION = "drivingDuration";
  private Integer drivingDuration;

  public RouteOptimizationLeg() { 
  }

  public RouteOptimizationLeg startLocationId(String startLocationId) {
    this.startLocationId = startLocationId;
    return this;
  }

   /**
   * The unique identifier of the location where the vehicle departs.
   * @return startLocationId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_LOCATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStartLocationId() {
    return startLocationId;
  }


  @JsonProperty(JSON_PROPERTY_START_LOCATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartLocationId(String startLocationId) {
    this.startLocationId = startLocationId;
  }


  public RouteOptimizationLeg departure(OffsetDateTime departure) {
    this.departure = departure;
    return this;
  }

   /**
   * The point in time when the vehicle departs from the start location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @return departure
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPARTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDeparture() {
    return departure;
  }


  @JsonProperty(JSON_PROPERTY_DEPARTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeparture(OffsetDateTime departure) {
    this.departure = departure;
  }


  public RouteOptimizationLeg endLocationId(String endLocationId) {
    this.endLocationId = endLocationId;
    return this;
  }

   /**
   * The unique identifier of the location where the vehicle arrives.
   * @return endLocationId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_LOCATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEndLocationId() {
    return endLocationId;
  }


  @JsonProperty(JSON_PROPERTY_END_LOCATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndLocationId(String endLocationId) {
    this.endLocationId = endLocationId;
  }


  public RouteOptimizationLeg arrival(OffsetDateTime arrival) {
    this.arrival = arrival;
    return this;
  }

   /**
   * The point in time when the vehicle arrives at the end location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @return arrival
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARRIVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getArrival() {
    return arrival;
  }


  @JsonProperty(JSON_PROPERTY_ARRIVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArrival(OffsetDateTime arrival) {
    this.arrival = arrival;
  }


  public RouteOptimizationLeg breaks(List<RouteOptimizationBreak> breaks) {
    this.breaks = breaks;
    return this;
  }

  public RouteOptimizationLeg addBreaksItem(RouteOptimizationBreak breaksItem) {
    if (this.breaks == null) {
      this.breaks = new ArrayList<>();
    }
    this.breaks.add(breaksItem);
    return this;
  }

   /**
   * A list of breaks taken while travelling from the start location to the end location.
   * @return breaks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BREAKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RouteOptimizationBreak> getBreaks() {
    return breaks;
  }


  @JsonProperty(JSON_PROPERTY_BREAKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBreaks(List<RouteOptimizationBreak> breaks) {
    this.breaks = breaks;
  }


  public RouteOptimizationLeg distance(Integer distance) {
    this.distance = distance;
    return this;
  }

   /**
   * The distance [m] travelled between the start location and end location.
   * minimum: 0
   * @return distance
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDistance() {
    return distance;
  }


  @JsonProperty(JSON_PROPERTY_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public RouteOptimizationLeg drivingDuration(Integer drivingDuration) {
    this.drivingDuration = drivingDuration;
    return this;
  }

   /**
   * The duration [s] it takes to drive from the start location to the end location.
   * minimum: 0
   * @return drivingDuration
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DRIVING_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDrivingDuration() {
    return drivingDuration;
  }


  @JsonProperty(JSON_PROPERTY_DRIVING_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDrivingDuration(Integer drivingDuration) {
    this.drivingDuration = drivingDuration;
  }


  /**
   * Return true if this Leg object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationLeg leg = (RouteOptimizationLeg) o;
    return Objects.equals(this.startLocationId, leg.startLocationId) &&
        Objects.equals(this.departure, leg.departure) &&
        Objects.equals(this.endLocationId, leg.endLocationId) &&
        Objects.equals(this.arrival, leg.arrival) &&
        Objects.equals(this.breaks, leg.breaks) &&
        Objects.equals(this.distance, leg.distance) &&
        Objects.equals(this.drivingDuration, leg.drivingDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startLocationId, departure, endLocationId, arrival, breaks, distance, drivingDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationLeg {\n");
    sb.append("    startLocationId: ").append(toIndentedString(startLocationId)).append("\n");
    sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
    sb.append("    endLocationId: ").append(toIndentedString(endLocationId)).append("\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    breaks: ").append(toIndentedString(breaks)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    drivingDuration: ").append(toIndentedString(drivingDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `startLocationId` to the URL query string
    if (getStartLocationId() != null) {
      joiner.add(String.format("%sstartLocationId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartLocationId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `departure` to the URL query string
    if (getDeparture() != null) {
      joiner.add(String.format("%sdeparture%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeparture()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `endLocationId` to the URL query string
    if (getEndLocationId() != null) {
      joiner.add(String.format("%sendLocationId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEndLocationId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `arrival` to the URL query string
    if (getArrival() != null) {
      joiner.add(String.format("%sarrival%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getArrival()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `breaks` to the URL query string
    if (getBreaks() != null) {
      for (int i = 0; i < getBreaks().size(); i++) {
        if (getBreaks().get(i) != null) {
          joiner.add(getBreaks().get(i).toUrlQueryString(String.format("%sbreaks%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `distance` to the URL query string
    if (getDistance() != null) {
      joiner.add(String.format("%sdistance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDistance()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `drivingDuration` to the URL query string
    if (getDrivingDuration() != null) {
      joiner.add(String.format("%sdrivingDuration%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDrivingDuration()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

