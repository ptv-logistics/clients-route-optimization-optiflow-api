/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A condition used to select which locations should be modified by a rule.  A condition is met if all its properties are matched.
 */
@JsonPropertyOrder({
  RouteOptimizationLocationRuleCondition.JSON_PROPERTY_LOCATION_CATEGORY,
  RouteOptimizationLocationRuleCondition.JSON_PROPERTY_PREVIOUS_LOCATION_CATEGORY,
  RouteOptimizationLocationRuleCondition.JSON_PROPERTY_VEHICLE_CATEGORY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-22T09:26:27.555614916Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationLocationRuleCondition {
  public static final String JSON_PROPERTY_LOCATION_CATEGORY = "locationCategory";
  private String locationCategory;

  public static final String JSON_PROPERTY_PREVIOUS_LOCATION_CATEGORY = "previousLocationCategory";
  private String previousLocationCategory;

  public static final String JSON_PROPERTY_VEHICLE_CATEGORY = "vehicleCategory";
  private String vehicleCategory;

  public RouteOptimizationLocationRuleCondition() { 
  }

  public RouteOptimizationLocationRuleCondition locationCategory(String locationCategory) {
    this.locationCategory = locationCategory;
    return this;
  }

   /**
   * The rule applies only if the location belongs to this category. When omitted, it applies to all locations.
   * @return locationCategory
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocationCategory() {
    return locationCategory;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocationCategory(String locationCategory) {
    this.locationCategory = locationCategory;
  }


  public RouteOptimizationLocationRuleCondition previousLocationCategory(String previousLocationCategory) {
    this.previousLocationCategory = previousLocationCategory;
    return this;
  }

   /**
   * The rule applies only if the previous location in the route belongs to this category. When omitted, it applies independently of the previous location.
   * @return previousLocationCategory
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIOUS_LOCATION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPreviousLocationCategory() {
    return previousLocationCategory;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_LOCATION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviousLocationCategory(String previousLocationCategory) {
    this.previousLocationCategory = previousLocationCategory;
  }


  public RouteOptimizationLocationRuleCondition vehicleCategory(String vehicleCategory) {
    this.vehicleCategory = vehicleCategory;
    return this;
  }

   /**
   * The rule applies only if the vehicle visiting the location belongs to this category. When omitted, it applies independently of the vehicle visiting the location.
   * @return vehicleCategory
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VEHICLE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVehicleCategory() {
    return vehicleCategory;
  }


  @JsonProperty(JSON_PROPERTY_VEHICLE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVehicleCategory(String vehicleCategory) {
    this.vehicleCategory = vehicleCategory;
  }


  /**
   * Return true if this LocationRuleCondition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationLocationRuleCondition locationRuleCondition = (RouteOptimizationLocationRuleCondition) o;
    return Objects.equals(this.locationCategory, locationRuleCondition.locationCategory) &&
        Objects.equals(this.previousLocationCategory, locationRuleCondition.previousLocationCategory) &&
        Objects.equals(this.vehicleCategory, locationRuleCondition.vehicleCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationCategory, previousLocationCategory, vehicleCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationLocationRuleCondition {\n");
    sb.append("    locationCategory: ").append(toIndentedString(locationCategory)).append("\n");
    sb.append("    previousLocationCategory: ").append(toIndentedString(previousLocationCategory)).append("\n");
    sb.append("    vehicleCategory: ").append(toIndentedString(vehicleCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `locationCategory` to the URL query string
    if (getLocationCategory() != null) {
      joiner.add(String.format("%slocationCategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLocationCategory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `previousLocationCategory` to the URL query string
    if (getPreviousLocationCategory() != null) {
      joiner.add(String.format("%spreviousLocationCategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreviousLocationCategory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `vehicleCategory` to the URL query string
    if (getVehicleCategory() != null) {
      joiner.add(String.format("%svehicleCategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVehicleCategory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

