/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Restricts how long the driver of the vehicle may drive without taking a break of at least the specified duration.
 */
@JsonPropertyOrder({
  RouteOptimizationDrivingBreakSettings.JSON_PROPERTY_MAXIMUM_DRIVING_DURATION,
  RouteOptimizationDrivingBreakSettings.JSON_PROPERTY_MINIMUM_BREAK_DURATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-02T08:00:16.777658760Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationDrivingBreakSettings {
  public static final String JSON_PROPERTY_MAXIMUM_DRIVING_DURATION = "maximumDrivingDuration";
  private Integer maximumDrivingDuration;

  public static final String JSON_PROPERTY_MINIMUM_BREAK_DURATION = "minimumBreakDuration";
  private Integer minimumBreakDuration;

  public RouteOptimizationDrivingBreakSettings() { 
  }

  public RouteOptimizationDrivingBreakSettings maximumDrivingDuration(Integer maximumDrivingDuration) {
    this.maximumDrivingDuration = maximumDrivingDuration;
    return this;
  }

   /**
   * Describes how long [s] the driver may drive without taking a break of at least the specified duration.
   * minimum: 0
   * @return maximumDrivingDuration
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRIVING_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaximumDrivingDuration() {
    return maximumDrivingDuration;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRIVING_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaximumDrivingDuration(Integer maximumDrivingDuration) {
    this.maximumDrivingDuration = maximumDrivingDuration;
  }


  public RouteOptimizationDrivingBreakSettings minimumBreakDuration(Integer minimumBreakDuration) {
    this.minimumBreakDuration = minimumBreakDuration;
    return this;
  }

   /**
   * Specifies the duration [s] of a break a driver has to take if they exceed the maximum driving duration.
   * minimum: 0
   * @return minimumBreakDuration
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MINIMUM_BREAK_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinimumBreakDuration() {
    return minimumBreakDuration;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_BREAK_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinimumBreakDuration(Integer minimumBreakDuration) {
    this.minimumBreakDuration = minimumBreakDuration;
  }


  /**
   * Return true if this DrivingBreakSettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationDrivingBreakSettings drivingBreakSettings = (RouteOptimizationDrivingBreakSettings) o;
    return Objects.equals(this.maximumDrivingDuration, drivingBreakSettings.maximumDrivingDuration) &&
        Objects.equals(this.minimumBreakDuration, drivingBreakSettings.minimumBreakDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maximumDrivingDuration, minimumBreakDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationDrivingBreakSettings {\n");
    sb.append("    maximumDrivingDuration: ").append(toIndentedString(maximumDrivingDuration)).append("\n");
    sb.append("    minimumBreakDuration: ").append(toIndentedString(minimumBreakDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `maximumDrivingDuration` to the URL query string
    if (getMaximumDrivingDuration() != null) {
      joiner.add(String.format("%smaximumDrivingDuration%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaximumDrivingDuration()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `minimumBreakDuration` to the URL query string
    if (getMinimumBreakDuration() != null) {
      joiner.add(String.format("%sminimumBreakDuration%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMinimumBreakDuration()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

