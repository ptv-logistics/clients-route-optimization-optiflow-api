/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationConstraints;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationDepot;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationLocation;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationOptimizationRequestMetadata;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationOptimizationSettings;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationOrders;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationRouteStructure;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationRules;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationVehicle;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The request data needed to start an optimization.
 */
@JsonPropertyOrder({
  RouteOptimizationOptimizationRequest.JSON_PROPERTY_SETTINGS,
  RouteOptimizationOptimizationRequest.JSON_PROPERTY_LOCATIONS,
  RouteOptimizationOptimizationRequest.JSON_PROPERTY_ORDERS,
  RouteOptimizationOptimizationRequest.JSON_PROPERTY_VEHICLES,
  RouteOptimizationOptimizationRequest.JSON_PROPERTY_DEPOTS,
  RouteOptimizationOptimizationRequest.JSON_PROPERTY_ROUTES,
  RouteOptimizationOptimizationRequest.JSON_PROPERTY_CONSTRAINTS,
  RouteOptimizationOptimizationRequest.JSON_PROPERTY_RULES,
  RouteOptimizationOptimizationRequest.JSON_PROPERTY_METADATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-03T08:03:45.906081716Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationOptimizationRequest {
  public static final String JSON_PROPERTY_SETTINGS = "settings";
  private RouteOptimizationOptimizationSettings settings;

  public static final String JSON_PROPERTY_LOCATIONS = "locations";
  private List<RouteOptimizationLocation> locations = new ArrayList<>();

  public static final String JSON_PROPERTY_ORDERS = "orders";
  private RouteOptimizationOrders orders;

  public static final String JSON_PROPERTY_VEHICLES = "vehicles";
  private List<RouteOptimizationVehicle> vehicles = new ArrayList<>();

  public static final String JSON_PROPERTY_DEPOTS = "depots";
  private List<RouteOptimizationDepot> depots = new ArrayList<>();

  public static final String JSON_PROPERTY_ROUTES = "routes";
  private List<RouteOptimizationRouteStructure> routes = new ArrayList<>();

  public static final String JSON_PROPERTY_CONSTRAINTS = "constraints";
  private RouteOptimizationConstraints constraints;

  public static final String JSON_PROPERTY_RULES = "rules";
  private RouteOptimizationRules rules;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private RouteOptimizationOptimizationRequestMetadata metadata;

  public RouteOptimizationOptimizationRequest() { 
  }

  public RouteOptimizationOptimizationRequest settings(RouteOptimizationOptimizationSettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RouteOptimizationOptimizationSettings getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSettings(RouteOptimizationOptimizationSettings settings) {
    this.settings = settings;
  }


  public RouteOptimizationOptimizationRequest locations(List<RouteOptimizationLocation> locations) {
    this.locations = locations;
    return this;
  }

  public RouteOptimizationOptimizationRequest addLocationsItem(RouteOptimizationLocation locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * A list of locations where goods have to be picked up or delivered, or where vehicles are located. Please note that the upper bound on number of locations is a technical limit. Check your individual price plan or contract to see which limits apply.
   * @return locations
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<RouteOptimizationLocation> getLocations() {
    return locations;
  }


  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocations(List<RouteOptimizationLocation> locations) {
    this.locations = locations;
  }


  public RouteOptimizationOptimizationRequest orders(RouteOptimizationOrders orders) {
    this.orders = orders;
    return this;
  }

   /**
   * Get orders
   * @return orders
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORDERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RouteOptimizationOrders getOrders() {
    return orders;
  }


  @JsonProperty(JSON_PROPERTY_ORDERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrders(RouteOptimizationOrders orders) {
    this.orders = orders;
  }


  public RouteOptimizationOptimizationRequest vehicles(List<RouteOptimizationVehicle> vehicles) {
    this.vehicles = vehicles;
    return this;
  }

  public RouteOptimizationOptimizationRequest addVehiclesItem(RouteOptimizationVehicle vehiclesItem) {
    if (this.vehicles == null) {
      this.vehicles = new ArrayList<>();
    }
    this.vehicles.add(vehiclesItem);
    return this;
  }

   /**
   * A list of vehicles that can be used by optimization to schedule routes. Optimization can only assign a single route to a vehicle and must respect the properties and constraints of the vehicle. Please note that the upper bound on number of vehicles is a technical limit. Check your individual price plan or contract to see which limits apply.
   * @return vehicles
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VEHICLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<RouteOptimizationVehicle> getVehicles() {
    return vehicles;
  }


  @JsonProperty(JSON_PROPERTY_VEHICLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVehicles(List<RouteOptimizationVehicle> vehicles) {
    this.vehicles = vehicles;
  }


  public RouteOptimizationOptimizationRequest depots(List<RouteOptimizationDepot> depots) {
    this.depots = depots;
    return this;
  }

  public RouteOptimizationOptimizationRequest addDepotsItem(RouteOptimizationDepot depotsItem) {
    if (this.depots == null) {
      this.depots = new ArrayList<>();
    }
    this.depots.add(depotsItem);
    return this;
  }

   /**
   * A list of depots where pickup orders can be delivered to or delivery orders can be picked up from. When providing pickup or delivery orders, at least one depot must be specified. Depots must not be specified when all orders are pickup-delivery orders. When stopping at a depot, all pickup orders present in the vehicle are unloaded first. Afterwards, delivery orders can be loaded into the vehicle. Those must be delivered before stopping at the next depot.
   * @return depots
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RouteOptimizationDepot> getDepots() {
    return depots;
  }


  @JsonProperty(JSON_PROPERTY_DEPOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDepots(List<RouteOptimizationDepot> depots) {
    this.depots = depots;
  }


  public RouteOptimizationOptimizationRequest routes(List<RouteOptimizationRouteStructure> routes) {
    this.routes = routes;
    return this;
  }

  public RouteOptimizationOptimizationRequest addRoutesItem(RouteOptimizationRouteStructure routesItem) {
    if (this.routes == null) {
      this.routes = new ArrayList<>();
    }
    this.routes.add(routesItem);
    return this;
  }

   /**
   * A list of routes that should be reconstructed prior to optimization. Reconstruction ensures all constraints are met and may involve removing orders, changing breaks, or adjusting the start time of the route. After the reconstruction, the optimization will try to improve the routes. The structure of the routes can be changed by the optimization as long as the constraints are satisfied. Check your individual price plan or contract to see whether or not the request may contain routes.
   * @return routes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RouteOptimizationRouteStructure> getRoutes() {
    return routes;
  }


  @JsonProperty(JSON_PROPERTY_ROUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoutes(List<RouteOptimizationRouteStructure> routes) {
    this.routes = routes;
  }


  public RouteOptimizationOptimizationRequest constraints(RouteOptimizationConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

   /**
   * Get constraints
   * @return constraints
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RouteOptimizationConstraints getConstraints() {
    return constraints;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstraints(RouteOptimizationConstraints constraints) {
    this.constraints = constraints;
  }


  public RouteOptimizationOptimizationRequest rules(RouteOptimizationRules rules) {
    this.rules = rules;
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RouteOptimizationRules getRules() {
    return rules;
  }


  @JsonProperty(JSON_PROPERTY_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRules(RouteOptimizationRules rules) {
    this.rules = rules;
  }


  public RouteOptimizationOptimizationRequest metadata(RouteOptimizationOptimizationRequestMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RouteOptimizationOptimizationRequestMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(RouteOptimizationOptimizationRequestMetadata metadata) {
    this.metadata = metadata;
  }


  /**
   * Return true if this OptimizationRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationOptimizationRequest optimizationRequest = (RouteOptimizationOptimizationRequest) o;
    return Objects.equals(this.settings, optimizationRequest.settings) &&
        Objects.equals(this.locations, optimizationRequest.locations) &&
        Objects.equals(this.orders, optimizationRequest.orders) &&
        Objects.equals(this.vehicles, optimizationRequest.vehicles) &&
        Objects.equals(this.depots, optimizationRequest.depots) &&
        Objects.equals(this.routes, optimizationRequest.routes) &&
        Objects.equals(this.constraints, optimizationRequest.constraints) &&
        Objects.equals(this.rules, optimizationRequest.rules) &&
        Objects.equals(this.metadata, optimizationRequest.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(settings, locations, orders, vehicles, depots, routes, constraints, rules, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationOptimizationRequest {\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    vehicles: ").append(toIndentedString(vehicles)).append("\n");
    sb.append("    depots: ").append(toIndentedString(depots)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `settings` to the URL query string
    if (getSettings() != null) {
      joiner.add(getSettings().toUrlQueryString(prefix + "settings" + suffix));
    }

    // add `locations` to the URL query string
    if (getLocations() != null) {
      for (int i = 0; i < getLocations().size(); i++) {
        if (getLocations().get(i) != null) {
          joiner.add(getLocations().get(i).toUrlQueryString(String.format("%slocations%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `orders` to the URL query string
    if (getOrders() != null) {
      joiner.add(getOrders().toUrlQueryString(prefix + "orders" + suffix));
    }

    // add `vehicles` to the URL query string
    if (getVehicles() != null) {
      for (int i = 0; i < getVehicles().size(); i++) {
        if (getVehicles().get(i) != null) {
          joiner.add(getVehicles().get(i).toUrlQueryString(String.format("%svehicles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `depots` to the URL query string
    if (getDepots() != null) {
      for (int i = 0; i < getDepots().size(); i++) {
        if (getDepots().get(i) != null) {
          joiner.add(getDepots().get(i).toUrlQueryString(String.format("%sdepots%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `routes` to the URL query string
    if (getRoutes() != null) {
      for (int i = 0; i < getRoutes().size(); i++) {
        if (getRoutes().get(i) != null) {
          joiner.add(getRoutes().get(i).toUrlQueryString(String.format("%sroutes%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `constraints` to the URL query string
    if (getConstraints() != null) {
      joiner.add(getConstraints().toUrlQueryString(prefix + "constraints" + suffix));
    }

    // add `rules` to the URL query string
    if (getRules() != null) {
      joiner.add(getRules().toUrlQueryString(prefix + "rules" + suffix));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(getMetadata().toUrlQueryString(prefix + "metadata" + suffix));
    }

    return joiner.toString();
  }
}

