/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.optiflow.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationBreak;
import com.ptvgroup.developer.client.routeoptimization.optiflow.model.RouteOptimizationTask;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A collection of consecutive tasks that are allocated to a time slot.
 */
@JsonPropertyOrder({
  RouteOptimizationAppointment.JSON_PROPERTY_TIME_SLOT_ID,
  RouteOptimizationAppointment.JSON_PROPERTY_BREAKS,
  RouteOptimizationAppointment.JSON_PROPERTY_WAITING_DURATION,
  RouteOptimizationAppointment.JSON_PROPERTY_START,
  RouteOptimizationAppointment.JSON_PROPERTY_PREPARATION_DURATION,
  RouteOptimizationAppointment.JSON_PROPERTY_TASKS,
  RouteOptimizationAppointment.JSON_PROPERTY_END
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-02T08:00:16.777658760Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class RouteOptimizationAppointment {
  public static final String JSON_PROPERTY_TIME_SLOT_ID = "timeSlotId";
  private String timeSlotId;

  public static final String JSON_PROPERTY_BREAKS = "breaks";
  private List<RouteOptimizationBreak> breaks = new ArrayList<>();

  public static final String JSON_PROPERTY_WAITING_DURATION = "waitingDuration";
  private Integer waitingDuration;

  public static final String JSON_PROPERTY_START = "start";
  private OffsetDateTime start;

  public static final String JSON_PROPERTY_PREPARATION_DURATION = "preparationDuration";
  private Integer preparationDuration;

  public static final String JSON_PROPERTY_TASKS = "tasks";
  private List<RouteOptimizationTask> tasks = new ArrayList<>();

  public static final String JSON_PROPERTY_END = "end";
  private OffsetDateTime end;

  public RouteOptimizationAppointment() { 
  }

  public RouteOptimizationAppointment timeSlotId(String timeSlotId) {
    this.timeSlotId = timeSlotId;
    return this;
  }

   /**
   * The unique identifier of the time slot this appointment is assigned to.
   * @return timeSlotId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_SLOT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimeSlotId() {
    return timeSlotId;
  }


  @JsonProperty(JSON_PROPERTY_TIME_SLOT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeSlotId(String timeSlotId) {
    this.timeSlotId = timeSlotId;
  }


  public RouteOptimizationAppointment breaks(List<RouteOptimizationBreak> breaks) {
    this.breaks = breaks;
    return this;
  }

  public RouteOptimizationAppointment addBreaksItem(RouteOptimizationBreak breaksItem) {
    if (this.breaks == null) {
      this.breaks = new ArrayList<>();
    }
    this.breaks.add(breaksItem);
    return this;
  }

   /**
   * A list of breaks that are scheduled to be taken before the appointment.
   * @return breaks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BREAKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RouteOptimizationBreak> getBreaks() {
    return breaks;
  }


  @JsonProperty(JSON_PROPERTY_BREAKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBreaks(List<RouteOptimizationBreak> breaks) {
    this.breaks = breaks;
  }


  public RouteOptimizationAppointment waitingDuration(Integer waitingDuration) {
    this.waitingDuration = waitingDuration;
    return this;
  }

   /**
   * The duration [s] of the waiting period before the appointment can start.
   * minimum: 0
   * @return waitingDuration
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WAITING_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWaitingDuration() {
    return waitingDuration;
  }


  @JsonProperty(JSON_PROPERTY_WAITING_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWaitingDuration(Integer waitingDuration) {
    this.waitingDuration = waitingDuration;
  }


  public RouteOptimizationAppointment start(OffsetDateTime start) {
    this.start = start;
    return this;
  }

   /**
   * The point in time when the appointment starts. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @return start
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStart(OffsetDateTime start) {
    this.start = start;
  }


  public RouteOptimizationAppointment preparationDuration(Integer preparationDuration) {
    this.preparationDuration = preparationDuration;
    return this;
  }

   /**
   * The duration [s] of the preparation period before the first task can start. This is determined by the allocated time slot.
   * minimum: 0
   * @return preparationDuration
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREPARATION_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPreparationDuration() {
    return preparationDuration;
  }


  @JsonProperty(JSON_PROPERTY_PREPARATION_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreparationDuration(Integer preparationDuration) {
    this.preparationDuration = preparationDuration;
  }


  public RouteOptimizationAppointment tasks(List<RouteOptimizationTask> tasks) {
    this.tasks = tasks;
    return this;
  }

  public RouteOptimizationAppointment addTasksItem(RouteOptimizationTask tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * The list of tasks that are scheduled to be executed within this appointment. Each task can either be a pickup or a delivery. For every order scheduled on the route, the route will contain a task describing the pickup of the order and a task describing the delivery of the order. When the order is a pickup order (resp. delivery order), its delivery task (resp. pickup task) will be scheduled at a depot.
   * @return tasks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RouteOptimizationTask> getTasks() {
    return tasks;
  }


  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTasks(List<RouteOptimizationTask> tasks) {
    this.tasks = tasks;
  }


  public RouteOptimizationAppointment end(OffsetDateTime end) {
    this.end = end;
    return this;
  }

   /**
   * The point in time when the appointment ends. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @return end
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getEnd() {
    return end;
  }


  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnd(OffsetDateTime end) {
    this.end = end;
  }


  /**
   * Return true if this Appointment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteOptimizationAppointment appointment = (RouteOptimizationAppointment) o;
    return Objects.equals(this.timeSlotId, appointment.timeSlotId) &&
        Objects.equals(this.breaks, appointment.breaks) &&
        Objects.equals(this.waitingDuration, appointment.waitingDuration) &&
        Objects.equals(this.start, appointment.start) &&
        Objects.equals(this.preparationDuration, appointment.preparationDuration) &&
        Objects.equals(this.tasks, appointment.tasks) &&
        Objects.equals(this.end, appointment.end);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeSlotId, breaks, waitingDuration, start, preparationDuration, tasks, end);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteOptimizationAppointment {\n");
    sb.append("    timeSlotId: ").append(toIndentedString(timeSlotId)).append("\n");
    sb.append("    breaks: ").append(toIndentedString(breaks)).append("\n");
    sb.append("    waitingDuration: ").append(toIndentedString(waitingDuration)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    preparationDuration: ").append(toIndentedString(preparationDuration)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `timeSlotId` to the URL query string
    if (getTimeSlotId() != null) {
      joiner.add(String.format("%stimeSlotId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimeSlotId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `breaks` to the URL query string
    if (getBreaks() != null) {
      for (int i = 0; i < getBreaks().size(); i++) {
        if (getBreaks().get(i) != null) {
          joiner.add(getBreaks().get(i).toUrlQueryString(String.format("%sbreaks%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `waitingDuration` to the URL query string
    if (getWaitingDuration() != null) {
      joiner.add(String.format("%swaitingDuration%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWaitingDuration()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `start` to the URL query string
    if (getStart() != null) {
      joiner.add(String.format("%sstart%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStart()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `preparationDuration` to the URL query string
    if (getPreparationDuration() != null) {
      joiner.add(String.format("%spreparationDuration%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreparationDuration()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tasks` to the URL query string
    if (getTasks() != null) {
      for (int i = 0; i < getTasks().size(); i++) {
        if (getTasks().get(i) != null) {
          joiner.add(getTasks().get(i).toUrlQueryString(String.format("%stasks%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `end` to the URL query string
    if (getEnd() != null) {
      joiner.add(String.format("%send%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnd()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

