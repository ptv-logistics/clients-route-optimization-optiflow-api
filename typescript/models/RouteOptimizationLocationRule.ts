/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RouteOptimizationDurationModifier } from './RouteOptimizationDurationModifier';
import {
    RouteOptimizationDurationModifierFromJSON,
    RouteOptimizationDurationModifierFromJSONTyped,
    RouteOptimizationDurationModifierToJSON,
} from './RouteOptimizationDurationModifier';
import type { RouteOptimizationLocationRuleCondition } from './RouteOptimizationLocationRuleCondition';
import {
    RouteOptimizationLocationRuleConditionFromJSON,
    RouteOptimizationLocationRuleConditionFromJSONTyped,
    RouteOptimizationLocationRuleConditionToJSON,
} from './RouteOptimizationLocationRuleCondition';

/**
 * A rule that conditionally modifies location properties.
 * @export
 * @interface RouteOptimizationLocationRule
 */
export interface RouteOptimizationLocationRule {
    /**
     * A list of conditions that describes when the rule applies. The rule applies if any of the conditions are met. A condition is met if all of its properties are matched.
     * @type {Array<RouteOptimizationLocationRuleCondition>}
     * @memberof RouteOptimizationLocationRule
     */
    conditions: Array<RouteOptimizationLocationRuleCondition>;
    /**
     * 
     * @type {RouteOptimizationDurationModifier}
     * @memberof RouteOptimizationLocationRule
     */
    preparationDuration: RouteOptimizationDurationModifier;
}

/**
 * Check if a given object implements the RouteOptimizationLocationRule interface.
 */
export function instanceOfRouteOptimizationLocationRule(value: object): boolean {
    if (!('conditions' in value)) return false;
    if (!('preparationDuration' in value)) return false;
    return true;
}

export function RouteOptimizationLocationRuleFromJSON(json: any): RouteOptimizationLocationRule {
    return RouteOptimizationLocationRuleFromJSONTyped(json, false);
}

export function RouteOptimizationLocationRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationLocationRule {
    if (json == null) {
        return json;
    }
    return {
        
        'conditions': ((json['conditions'] as Array<any>).map(RouteOptimizationLocationRuleConditionFromJSON)),
        'preparationDuration': RouteOptimizationDurationModifierFromJSON(json['preparationDuration']),
    };
}

export function RouteOptimizationLocationRuleToJSON(value?: RouteOptimizationLocationRule | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'conditions': ((value['conditions'] as Array<any>).map(RouteOptimizationLocationRuleConditionToJSON)),
        'preparationDuration': RouteOptimizationDurationModifierToJSON(value['preparationDuration']),
    };
}

