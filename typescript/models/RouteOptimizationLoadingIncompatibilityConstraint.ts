/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Describes a constraint where orders are forbidden to be loaded or unloaded while other orders are loaded in the vehicle.
 * @export
 * @interface RouteOptimizationLoadingIncompatibilityConstraint
 */
export interface RouteOptimizationLoadingIncompatibilityConstraint {
    /**
     * Orders belonging to this category must be loaded in the vehicle for this constraint to apply. The constraint will be ignored when no order belongs to this category.
     * @type {string}
     * @memberof RouteOptimizationLoadingIncompatibilityConstraint
     */
    loadedOrderCategory: string;
    /**
     * Orders belonging to this category cannot be loaded or unloaded while the constraint applies. The constraint will be ignored when no order belongs to this category.
     * @type {string}
     * @memberof RouteOptimizationLoadingIncompatibilityConstraint
     */
    forbiddenOrderCategory: string;
    /**
     * The category of vehicles to which this constraint applies. When omitted the constraint applies to all vehicles. The constraint will be ignored when no vehicle belongs to this category.
     * @type {string}
     * @memberof RouteOptimizationLoadingIncompatibilityConstraint
     */
    vehicleCategory?: string;
}

/**
 * Check if a given object implements the RouteOptimizationLoadingIncompatibilityConstraint interface.
 */
export function instanceOfRouteOptimizationLoadingIncompatibilityConstraint(value: object): boolean {
    if (!('loadedOrderCategory' in value)) return false;
    if (!('forbiddenOrderCategory' in value)) return false;
    return true;
}

export function RouteOptimizationLoadingIncompatibilityConstraintFromJSON(json: any): RouteOptimizationLoadingIncompatibilityConstraint {
    return RouteOptimizationLoadingIncompatibilityConstraintFromJSONTyped(json, false);
}

export function RouteOptimizationLoadingIncompatibilityConstraintFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationLoadingIncompatibilityConstraint {
    if (json == null) {
        return json;
    }
    return {
        
        'loadedOrderCategory': json['loadedOrderCategory'],
        'forbiddenOrderCategory': json['forbiddenOrderCategory'],
        'vehicleCategory': json['vehicleCategory'] == null ? undefined : json['vehicleCategory'],
    };
}

export function RouteOptimizationLoadingIncompatibilityConstraintToJSON(value?: RouteOptimizationLoadingIncompatibilityConstraint | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'loadedOrderCategory': value['loadedOrderCategory'],
        'forbiddenOrderCategory': value['forbiddenOrderCategory'],
        'vehicleCategory': value['vehicleCategory'],
    };
}

