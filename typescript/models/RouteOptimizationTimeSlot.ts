/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Describes a possibility to schedule an appointment to execute tasks at a location.
 * @export
 * @interface RouteOptimizationTimeSlot
 */
export interface RouteOptimizationTimeSlot {
    /**
     * A unique identifier of the time slot. Must be unique within each location.
     * @type {string}
     * @memberof RouteOptimizationTimeSlot
     */
    id: string;
    /**
     * The earliest point in time an appointment may start in this time slot. When omitted the appointment may start as early as desired. When used in conjunction with a latest start time, the earliest start time of a time slot must not be later than its latest start time. When used in conjunction with a latest end time, the earliest start time of a time slot must not be later than its latest end time. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). The date must not be before `1970-01-01T00:00:00+00:00` nor after `2037-12-31T23:59:59+00:00`. The date must provide an offset to UTC.
     * @type {Date}
     * @memberof RouteOptimizationTimeSlot
     */
    earliestStart?: Date;
    /**
     * The latest point in time an appointment may start in this time slot. When omitted the appointment may start as late as desired. When used in conjunction with an earliest start time, the latest start time of a time slot must not be earlier than its earliest start time. When used in conjunction with a latest end time, the latest start time of a time slot must not be later than its latest end time. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). The date must not be before `1970-01-01T00:00:00+00:00` nor after `2037-12-31T23:59:59+00:00`. The date must provide an offset to UTC.
     * @type {Date}
     * @memberof RouteOptimizationTimeSlot
     */
    latestStart?: Date;
    /**
     * The latest point in time an appointment may end in this time slot. When omitted the appointment may end as late as desired. When used in conjunction with an earliest start time, the latest end time of a time slot must not be earlier than its earliest start time. When used in conjunction with an latest start time, the latest end time of a time slot must not be earlier than its latest start time. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). The date must not be before `1970-01-01T00:00:00+00:00` nor after `2037-12-31T23:59:59+00:00`. The date must provide an offset to UTC.
     * @type {Date}
     * @memberof RouteOptimizationTimeSlot
     */
    latestEnd?: Date;
    /**
     * Describes how many appointments may be assigned to this time slot. When omitted, an unlimited number of appointments may be assigned to this time slot.
     * @type {number}
     * @memberof RouteOptimizationTimeSlot
     */
    maximumAppointments?: number;
    /**
     * Describes the cost for assigning an appointment to this time slot.
     * @type {number}
     * @memberof RouteOptimizationTimeSlot
     */
    costPerAppointment?: number;
    /**
     * Describes how long [s] it takes before the first task can be executed after starting the appointment.
     * @type {number}
     * @memberof RouteOptimizationTimeSlot
     */
    preparationDuration?: number;
}

/**
 * Check if a given object implements the RouteOptimizationTimeSlot interface.
 */
export function instanceOfRouteOptimizationTimeSlot(value: object): boolean {
    if (!('id' in value)) return false;
    return true;
}

export function RouteOptimizationTimeSlotFromJSON(json: any): RouteOptimizationTimeSlot {
    return RouteOptimizationTimeSlotFromJSONTyped(json, false);
}

export function RouteOptimizationTimeSlotFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationTimeSlot {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'earliestStart': json['earliestStart'] == null ? undefined : (new Date(json['earliestStart'])),
        'latestStart': json['latestStart'] == null ? undefined : (new Date(json['latestStart'])),
        'latestEnd': json['latestEnd'] == null ? undefined : (new Date(json['latestEnd'])),
        'maximumAppointments': json['maximumAppointments'] == null ? undefined : json['maximumAppointments'],
        'costPerAppointment': json['costPerAppointment'] == null ? undefined : json['costPerAppointment'],
        'preparationDuration': json['preparationDuration'] == null ? undefined : json['preparationDuration'],
    };
}

export function RouteOptimizationTimeSlotToJSON(value?: RouteOptimizationTimeSlot | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'earliestStart': value['earliestStart'] == null ? undefined : ((value['earliestStart']).toISOString()),
        'latestStart': value['latestStart'] == null ? undefined : ((value['latestStart']).toISOString()),
        'latestEnd': value['latestEnd'] == null ? undefined : ((value['latestEnd']).toISOString()),
        'maximumAppointments': value['maximumAppointments'],
        'costPerAppointment': value['costPerAppointment'],
        'preparationDuration': value['preparationDuration'],
    };
}

