/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RouteOptimizationLoad } from './RouteOptimizationLoad';
import {
    RouteOptimizationLoadFromJSON,
    RouteOptimizationLoadFromJSONTyped,
    RouteOptimizationLoadToJSON,
} from './RouteOptimizationLoad';

/**
 * Information about the order.
 * @export
 * @interface RouteOptimizationOrderProperties
 */
export interface RouteOptimizationOrderProperties {
    /**
     * A list of load definitions that describe the necessary vehicle capacity to transport the order. For each dimension, the sum of the values of orders loaded into the vehicle must be lower than or equal to the value of the vehicle.
     * @type {Array<RouteOptimizationLoad>}
     * @memberof RouteOptimizationOrderProperties
     */
    loads?: Array<RouteOptimizationLoad>;
    /**
     * When two orders are loaded into the same compartment and delivered in the same order, we refer to them as a non-last-in-first-out (non-LIFO) pair. Any non-LIFO pair of orders requires repositioning in the vehicle, as the last picked-up order obstructs the first order that needs to be delivered. The effort involved in this repositioning is the minimum effort required for the two orders. The total repositioning effort for the route is the sum of the repositioning efforts for all non-LIFO pairs of orders.
     * @type {number}
     * @memberof RouteOptimizationOrderProperties
     */
    repositioningEffort?: number;
    /**
     * Defines the cost for not scheduling the order on a route. This cost is weighed against the cost of scheduling the order on a route. When omitted the optimization will try to schedule the order regardless of the added cost.
     * @type {number}
     * @memberof RouteOptimizationOrderProperties
     */
    outsourcingCost?: number;
    /**
     * A list of categories the order belongs to that can be used to describe constraints or rules.
     * @type {Array<string>}
     * @memberof RouteOptimizationOrderProperties
     */
    categories?: Array<string>;
}

/**
 * Check if a given object implements the RouteOptimizationOrderProperties interface.
 */
export function instanceOfRouteOptimizationOrderProperties(value: object): boolean {
    return true;
}

export function RouteOptimizationOrderPropertiesFromJSON(json: any): RouteOptimizationOrderProperties {
    return RouteOptimizationOrderPropertiesFromJSONTyped(json, false);
}

export function RouteOptimizationOrderPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationOrderProperties {
    if (json == null) {
        return json;
    }
    return {
        
        'loads': json['loads'] == null ? undefined : ((json['loads'] as Array<any>).map(RouteOptimizationLoadFromJSON)),
        'repositioningEffort': json['repositioningEffort'] == null ? undefined : json['repositioningEffort'],
        'outsourcingCost': json['outsourcingCost'] == null ? undefined : json['outsourcingCost'],
        'categories': json['categories'] == null ? undefined : json['categories'],
    };
}

export function RouteOptimizationOrderPropertiesToJSON(value?: RouteOptimizationOrderProperties | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'loads': value['loads'] == null ? undefined : ((value['loads'] as Array<any>).map(RouteOptimizationLoadToJSON)),
        'repositioningEffort': value['repositioningEffort'],
        'outsourcingCost': value['outsourcingCost'],
        'categories': value['categories'],
    };
}

