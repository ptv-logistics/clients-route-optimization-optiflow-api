/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RouteOptimizationBreakSettings } from './RouteOptimizationBreakSettings';
import {
    RouteOptimizationBreakSettingsFromJSON,
    RouteOptimizationBreakSettingsFromJSONTyped,
    RouteOptimizationBreakSettingsToJSON,
} from './RouteOptimizationBreakSettings';
import type { RouteOptimizationCompartment } from './RouteOptimizationCompartment';
import {
    RouteOptimizationCompartmentFromJSON,
    RouteOptimizationCompartmentFromJSONTyped,
    RouteOptimizationCompartmentToJSON,
} from './RouteOptimizationCompartment';
import type { RouteOptimizationVehicleConstraints } from './RouteOptimizationVehicleConstraints';
import {
    RouteOptimizationVehicleConstraintsFromJSON,
    RouteOptimizationVehicleConstraintsFromJSONTyped,
    RouteOptimizationVehicleConstraintsToJSON,
} from './RouteOptimizationVehicleConstraints';
import type { RouteOptimizationVehicleCosts } from './RouteOptimizationVehicleCosts';
import {
    RouteOptimizationVehicleCostsFromJSON,
    RouteOptimizationVehicleCostsFromJSONTyped,
    RouteOptimizationVehicleCostsToJSON,
} from './RouteOptimizationVehicleCosts';
import type { RouteOptimizationVehicleEnd } from './RouteOptimizationVehicleEnd';
import {
    RouteOptimizationVehicleEndFromJSON,
    RouteOptimizationVehicleEndFromJSONTyped,
    RouteOptimizationVehicleEndToJSON,
} from './RouteOptimizationVehicleEnd';
import type { RouteOptimizationVehiclePreferences } from './RouteOptimizationVehiclePreferences';
import {
    RouteOptimizationVehiclePreferencesFromJSON,
    RouteOptimizationVehiclePreferencesFromJSONTyped,
    RouteOptimizationVehiclePreferencesToJSON,
} from './RouteOptimizationVehiclePreferences';
import type { RouteOptimizationVehicleRouting } from './RouteOptimizationVehicleRouting';
import {
    RouteOptimizationVehicleRoutingFromJSON,
    RouteOptimizationVehicleRoutingFromJSONTyped,
    RouteOptimizationVehicleRoutingToJSON,
} from './RouteOptimizationVehicleRouting';
import type { RouteOptimizationVehicleStart } from './RouteOptimizationVehicleStart';
import {
    RouteOptimizationVehicleStartFromJSON,
    RouteOptimizationVehicleStartFromJSONTyped,
    RouteOptimizationVehicleStartToJSON,
} from './RouteOptimizationVehicleStart';

/**
 * A vehicle that can be used to schedule routes. The optimization can only assign a single route to a vehicle while respecting the properties and constraints of the vehicle.
 * @export
 * @interface RouteOptimizationVehicle
 */
export interface RouteOptimizationVehicle {
    /**
     * A unique identifier of the vehicle.
     * @type {string}
     * @memberof RouteOptimizationVehicle
     */
    id: string;
    /**
     * 
     * @type {RouteOptimizationVehicleStart}
     * @memberof RouteOptimizationVehicle
     */
    start: RouteOptimizationVehicleStart;
    /**
     * 
     * @type {RouteOptimizationVehicleEnd}
     * @memberof RouteOptimizationVehicle
     */
    end: RouteOptimizationVehicleEnd;
    /**
     * 
     * @type {RouteOptimizationVehicleRouting}
     * @memberof RouteOptimizationVehicle
     */
    routing: RouteOptimizationVehicleRouting;
    /**
     * 
     * @type {RouteOptimizationVehicleCosts}
     * @memberof RouteOptimizationVehicle
     */
    costs: RouteOptimizationVehicleCosts;
    /**
     * 
     * @type {RouteOptimizationVehiclePreferences}
     * @memberof RouteOptimizationVehicle
     */
    preferences?: RouteOptimizationVehiclePreferences;
    /**
     * 
     * @type {RouteOptimizationBreakSettings}
     * @memberof RouteOptimizationVehicle
     */
    breaks?: RouteOptimizationBreakSettings;
    /**
     * A list of compartments available for loading orders. Orders placed into the same compartment must follow the compartment's loading strategy, which may impose restrictions on the unloading sequence. If orders are loaded into separate compartments, no restrictions apply to the unloading sequence. When unspecified or empty, the vehicle is assumed to have a single compartment with loading strategy `NONE`.
     * @type {Array<RouteOptimizationCompartment>}
     * @memberof RouteOptimizationVehicle
     */
    compartments?: Array<RouteOptimizationCompartment>;
    /**
     * 
     * @type {RouteOptimizationVehicleConstraints}
     * @memberof RouteOptimizationVehicle
     */
    constraints?: RouteOptimizationVehicleConstraints;
    /**
     * A list of categories the vehicle belongs to that can be used to describe constraints or rules.
     * @type {Array<string>}
     * @memberof RouteOptimizationVehicle
     */
    categories?: Array<string>;
}

/**
 * Check if a given object implements the RouteOptimizationVehicle interface.
 */
export function instanceOfRouteOptimizationVehicle(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('start' in value)) return false;
    if (!('end' in value)) return false;
    if (!('routing' in value)) return false;
    if (!('costs' in value)) return false;
    return true;
}

export function RouteOptimizationVehicleFromJSON(json: any): RouteOptimizationVehicle {
    return RouteOptimizationVehicleFromJSONTyped(json, false);
}

export function RouteOptimizationVehicleFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationVehicle {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'start': RouteOptimizationVehicleStartFromJSON(json['start']),
        'end': RouteOptimizationVehicleEndFromJSON(json['end']),
        'routing': RouteOptimizationVehicleRoutingFromJSON(json['routing']),
        'costs': RouteOptimizationVehicleCostsFromJSON(json['costs']),
        'preferences': json['preferences'] == null ? undefined : RouteOptimizationVehiclePreferencesFromJSON(json['preferences']),
        'breaks': json['breaks'] == null ? undefined : RouteOptimizationBreakSettingsFromJSON(json['breaks']),
        'compartments': json['compartments'] == null ? undefined : ((json['compartments'] as Array<any>).map(RouteOptimizationCompartmentFromJSON)),
        'constraints': json['constraints'] == null ? undefined : RouteOptimizationVehicleConstraintsFromJSON(json['constraints']),
        'categories': json['categories'] == null ? undefined : json['categories'],
    };
}

export function RouteOptimizationVehicleToJSON(value?: RouteOptimizationVehicle | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'start': RouteOptimizationVehicleStartToJSON(value['start']),
        'end': RouteOptimizationVehicleEndToJSON(value['end']),
        'routing': RouteOptimizationVehicleRoutingToJSON(value['routing']),
        'costs': RouteOptimizationVehicleCostsToJSON(value['costs']),
        'preferences': RouteOptimizationVehiclePreferencesToJSON(value['preferences']),
        'breaks': RouteOptimizationBreakSettingsToJSON(value['breaks']),
        'compartments': value['compartments'] == null ? undefined : ((value['compartments'] as Array<any>).map(RouteOptimizationCompartmentToJSON)),
        'constraints': RouteOptimizationVehicleConstraintsToJSON(value['constraints']),
        'categories': value['categories'],
    };
}

