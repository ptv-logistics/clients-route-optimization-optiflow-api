/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RouteOptimizationOverdistanceCost } from './RouteOptimizationOverdistanceCost';
import {
    RouteOptimizationOverdistanceCostFromJSON,
    RouteOptimizationOverdistanceCostFromJSONTyped,
    RouteOptimizationOverdistanceCostToJSON,
} from './RouteOptimizationOverdistanceCost';
import type { RouteOptimizationOverstopCost } from './RouteOptimizationOverstopCost';
import {
    RouteOptimizationOverstopCostFromJSON,
    RouteOptimizationOverstopCostFromJSONTyped,
    RouteOptimizationOverstopCostToJSON,
} from './RouteOptimizationOverstopCost';
import type { RouteOptimizationOvertimeCost } from './RouteOptimizationOvertimeCost';
import {
    RouteOptimizationOvertimeCostFromJSON,
    RouteOptimizationOvertimeCostFromJSONTyped,
    RouteOptimizationOvertimeCostToJSON,
} from './RouteOptimizationOvertimeCost';
import type { RouteOptimizationRepositioningEffortCost } from './RouteOptimizationRepositioningEffortCost';
import {
    RouteOptimizationRepositioningEffortCostFromJSON,
    RouteOptimizationRepositioningEffortCostFromJSONTyped,
    RouteOptimizationRepositioningEffortCostToJSON,
} from './RouteOptimizationRepositioningEffortCost';

/**
 * Defines the costs for using the vehicle to execute tasks.
 * @export
 * @interface RouteOptimizationVehicleCosts
 */
export interface RouteOptimizationVehicleCosts {
    /**
     * Specifies the cost for every hour the vehicle is used.
     * @type {number}
     * @memberof RouteOptimizationVehicleCosts
     */
    perHour: number;
    /**
     * Specifies the cost for every kilometer driven with the vehicle.
     * @type {number}
     * @memberof RouteOptimizationVehicleCosts
     */
    perKilometer: number;
    /**
     * Specifies the cost for every stop on the route of the vehicle.
     * @type {number}
     * @memberof RouteOptimizationVehicleCosts
     */
    perStop?: number;
    /**
     * Specifies the fixed cost for assigning a route to the vehicle.
     * @type {number}
     * @memberof RouteOptimizationVehicleCosts
     */
    fixed?: number;
    /**
     * A list of overtime costs that describe an increasing cost if the route duration exceeds a threshold. For each exceeded threshold, the additional cost for the extra hours contributes to the total cost of the route.
     * @type {Array<RouteOptimizationOvertimeCost>}
     * @memberof RouteOptimizationVehicleCosts
     */
    overtimes?: Array<RouteOptimizationOvertimeCost>;
    /**
     * A list of overdistance costs that describe an increasing cost if the total distance of a route exceeds a threshold. For each exceeded threshold, the additional cost for the extra kilometers contributes to the total cost of the route.
     * @type {Array<RouteOptimizationOverdistanceCost>}
     * @memberof RouteOptimizationVehicleCosts
     */
    overdistances?: Array<RouteOptimizationOverdistanceCost>;
    /**
     * A list of overstop costs that describe an increasing cost if the number of stops of a route exceeds a threshold. For each exceeded threshold, the additional cost for the extra stops contributes to the total cost of the route.
     * @type {Array<RouteOptimizationOverstopCost>}
     * @memberof RouteOptimizationVehicleCosts
     */
    overstops?: Array<RouteOptimizationOverstopCost>;
    /**
     * Specifies a list of repositioning effort costs that describe an increasing cost if the route's repositioning effort exceeds a threshold.
     * 
     * When two orders are loaded into the same compartment and delivered in the same order, we refer to them as a non-last-in-first-out (non-LIFO) pair. Any non-LIFO pair of orders requires repositioning in the vehicle, as the last picked-up order obstructs the first order that needs to be delivered. The effort involved in this repositioning is the minimum effort required for the two orders. The total repositioning effort for the route is the sum of the repositioning efforts for all non-LIFO pairs of orders.
     * @type {Array<RouteOptimizationRepositioningEffortCost>}
     * @memberof RouteOptimizationVehicleCosts
     */
    repositioningEfforts?: Array<RouteOptimizationRepositioningEffortCost>;
}

/**
 * Check if a given object implements the RouteOptimizationVehicleCosts interface.
 */
export function instanceOfRouteOptimizationVehicleCosts(value: object): boolean {
    if (!('perHour' in value)) return false;
    if (!('perKilometer' in value)) return false;
    return true;
}

export function RouteOptimizationVehicleCostsFromJSON(json: any): RouteOptimizationVehicleCosts {
    return RouteOptimizationVehicleCostsFromJSONTyped(json, false);
}

export function RouteOptimizationVehicleCostsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationVehicleCosts {
    if (json == null) {
        return json;
    }
    return {
        
        'perHour': json['perHour'],
        'perKilometer': json['perKilometer'],
        'perStop': json['perStop'] == null ? undefined : json['perStop'],
        'fixed': json['fixed'] == null ? undefined : json['fixed'],
        'overtimes': json['overtimes'] == null ? undefined : ((json['overtimes'] as Array<any>).map(RouteOptimizationOvertimeCostFromJSON)),
        'overdistances': json['overdistances'] == null ? undefined : ((json['overdistances'] as Array<any>).map(RouteOptimizationOverdistanceCostFromJSON)),
        'overstops': json['overstops'] == null ? undefined : ((json['overstops'] as Array<any>).map(RouteOptimizationOverstopCostFromJSON)),
        'repositioningEfforts': json['repositioningEfforts'] == null ? undefined : ((json['repositioningEfforts'] as Array<any>).map(RouteOptimizationRepositioningEffortCostFromJSON)),
    };
}

export function RouteOptimizationVehicleCostsToJSON(value?: RouteOptimizationVehicleCosts | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'perHour': value['perHour'],
        'perKilometer': value['perKilometer'],
        'perStop': value['perStop'],
        'fixed': value['fixed'],
        'overtimes': value['overtimes'] == null ? undefined : ((value['overtimes'] as Array<any>).map(RouteOptimizationOvertimeCostToJSON)),
        'overdistances': value['overdistances'] == null ? undefined : ((value['overdistances'] as Array<any>).map(RouteOptimizationOverdistanceCostToJSON)),
        'overstops': value['overstops'] == null ? undefined : ((value['overstops'] as Array<any>).map(RouteOptimizationOverstopCostToJSON)),
        'repositioningEfforts': value['repositioningEfforts'] == null ? undefined : ((value['repositioningEfforts'] as Array<any>).map(RouteOptimizationRepositioningEffortCostToJSON)),
    };
}

