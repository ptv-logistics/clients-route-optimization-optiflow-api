/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RouteOptimizationVehicleSlot } from './RouteOptimizationVehicleSlot';
import {
    RouteOptimizationVehicleSlotFromJSON,
    RouteOptimizationVehicleSlotFromJSONTyped,
    RouteOptimizationVehicleSlotToJSON,
} from './RouteOptimizationVehicleSlot';

/**
 * If stop concurrency is specified, each stop at the location must be assigned to a vehicle slot. Two stops may be assigned to the same vehicle slot if the duration between the end of the last appointment of the first stop and the start of the first appointment of the other stop is at least the specified minimum buffer duration, in which case they are not considered concurrent stops. Assigning at least one stop to a slot incurs a cost, encouraging reduction of the maximum number of concurrent stops at the location. If there is no minimum buffer duration, stops where the first appointment starts at the same time as the last ends do not need to be assigned to a vehicle slot. When omitted, stops at this location will not be assigned to a vehicle slot.
 * @export
 * @interface RouteOptimizationStopConcurrency
 */
export interface RouteOptimizationStopConcurrency {
    /**
     * A list of available vehicle slots.
     * @type {Array<RouteOptimizationVehicleSlot>}
     * @memberof RouteOptimizationStopConcurrency
     */
    vehicleSlots?: Array<RouteOptimizationVehicleSlot>;
    /**
     * The additional cost incurred for using an extra vehicle slot beyond the available ones. This must be greater than or equal to the cost of each vehicle slot.
     * @type {number}
     * @memberof RouteOptimizationStopConcurrency
     */
    violationCostPerExtraSlot: number;
    /**
     * The minimum duration [s] between the end of the last appointment of a stop and the start of the first appointment of another stop assigned to the same vehicle slot.
     * @type {number}
     * @memberof RouteOptimizationStopConcurrency
     */
    minimumBufferDuration?: number;
}

/**
 * Check if a given object implements the RouteOptimizationStopConcurrency interface.
 */
export function instanceOfRouteOptimizationStopConcurrency(value: object): boolean {
    if (!('violationCostPerExtraSlot' in value)) return false;
    return true;
}

export function RouteOptimizationStopConcurrencyFromJSON(json: any): RouteOptimizationStopConcurrency {
    return RouteOptimizationStopConcurrencyFromJSONTyped(json, false);
}

export function RouteOptimizationStopConcurrencyFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationStopConcurrency {
    if (json == null) {
        return json;
    }
    return {
        
        'vehicleSlots': json['vehicleSlots'] == null ? undefined : ((json['vehicleSlots'] as Array<any>).map(RouteOptimizationVehicleSlotFromJSON)),
        'violationCostPerExtraSlot': json['violationCostPerExtraSlot'],
        'minimumBufferDuration': json['minimumBufferDuration'] == null ? undefined : json['minimumBufferDuration'],
    };
}

export function RouteOptimizationStopConcurrencyToJSON(value?: RouteOptimizationStopConcurrency | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'vehicleSlots': value['vehicleSlots'] == null ? undefined : ((value['vehicleSlots'] as Array<any>).map(RouteOptimizationVehicleSlotToJSON)),
        'violationCostPerExtraSlot': value['violationCostPerExtraSlot'],
        'minimumBufferDuration': value['minimumBufferDuration'],
    };
}

