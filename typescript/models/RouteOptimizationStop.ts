/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RouteOptimizationAppointment } from './RouteOptimizationAppointment';
import {
    RouteOptimizationAppointmentFromJSON,
    RouteOptimizationAppointmentFromJSONTyped,
    RouteOptimizationAppointmentToJSON,
} from './RouteOptimizationAppointment';
import type { RouteOptimizationLeg } from './RouteOptimizationLeg';
import {
    RouteOptimizationLegFromJSON,
    RouteOptimizationLegFromJSONTyped,
    RouteOptimizationLegToJSON,
} from './RouteOptimizationLeg';

/**
 * A location visit on a route where one or more tasks are scheduled.
 * @export
 * @interface RouteOptimizationStop
 */
export interface RouteOptimizationStop {
    /**
     * The unique identifier of the location where this stop is taking place.
     * @type {string}
     * @memberof RouteOptimizationStop
     */
    locationId?: string;
    /**
     * 
     * @type {RouteOptimizationLeg}
     * @memberof RouteOptimizationStop
     */
    approach?: RouteOptimizationLeg;
    /**
     * The point in time when the vehicle arrives at the location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof RouteOptimizationStop
     */
    arrival?: Date;
    /**
     * A period of time [s] that is required between the arrival at the location and the start of the first appointment. The preparation duration is scheduled before tasks can be executed at the stop.
     * @type {number}
     * @memberof RouteOptimizationStop
     */
    preparationDuration?: number;
    /**
     * A list of appointments that describe the tasks that are scheduled for execution at this stop. Consecutive tasks are grouped into an appointment if they have been assigned to the same time slot.
     * @type {Array<RouteOptimizationAppointment>}
     * @memberof RouteOptimizationStop
     */
    appointments?: Array<RouteOptimizationAppointment>;
    /**
     * Describes the index of the vehicle slot this stop is assigned to. If there is no vehicle slot provided for this index, the stop is assigned to an extra vehicle slot.
     * @type {number}
     * @memberof RouteOptimizationStop
     */
    vehicleSlotIndex?: number;
    /**
     * The point in time when the vehicle departs at the location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof RouteOptimizationStop
     */
    departure?: Date;
}

/**
 * Check if a given object implements the RouteOptimizationStop interface.
 */
export function instanceOfRouteOptimizationStop(value: object): boolean {
    return true;
}

export function RouteOptimizationStopFromJSON(json: any): RouteOptimizationStop {
    return RouteOptimizationStopFromJSONTyped(json, false);
}

export function RouteOptimizationStopFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationStop {
    if (json == null) {
        return json;
    }
    return {
        
        'locationId': json['locationId'] == null ? undefined : json['locationId'],
        'approach': json['approach'] == null ? undefined : RouteOptimizationLegFromJSON(json['approach']),
        'arrival': json['arrival'] == null ? undefined : (new Date(json['arrival'])),
        'preparationDuration': json['preparationDuration'] == null ? undefined : json['preparationDuration'],
        'appointments': json['appointments'] == null ? undefined : ((json['appointments'] as Array<any>).map(RouteOptimizationAppointmentFromJSON)),
        'vehicleSlotIndex': json['vehicleSlotIndex'] == null ? undefined : json['vehicleSlotIndex'],
        'departure': json['departure'] == null ? undefined : (new Date(json['departure'])),
    };
}

export function RouteOptimizationStopToJSON(value?: RouteOptimizationStop | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'locationId': value['locationId'],
        'approach': RouteOptimizationLegToJSON(value['approach']),
        'arrival': value['arrival'] == null ? undefined : ((value['arrival']).toISOString()),
        'preparationDuration': value['preparationDuration'],
        'appointments': value['appointments'] == null ? undefined : ((value['appointments'] as Array<any>).map(RouteOptimizationAppointmentToJSON)),
        'vehicleSlotIndex': value['vehicleSlotIndex'],
        'departure': value['departure'] == null ? undefined : ((value['departure']).toISOString()),
    };
}

