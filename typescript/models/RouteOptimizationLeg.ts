/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RouteOptimizationBreak } from './RouteOptimizationBreak';
import {
    RouteOptimizationBreakFromJSON,
    RouteOptimizationBreakFromJSONTyped,
    RouteOptimizationBreakToJSON,
} from './RouteOptimizationBreak';

/**
 * A section of a route where a vehicle travels from one location to another.
 * @export
 * @interface RouteOptimizationLeg
 */
export interface RouteOptimizationLeg {
    /**
     * The unique identifier of the location where the vehicle departs.
     * @type {string}
     * @memberof RouteOptimizationLeg
     */
    startLocationId?: string;
    /**
     * The point in time when the vehicle departs from the start location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof RouteOptimizationLeg
     */
    departure?: Date;
    /**
     * The unique identifier of the location where the vehicle arrives.
     * @type {string}
     * @memberof RouteOptimizationLeg
     */
    endLocationId?: string;
    /**
     * The point in time when the vehicle arrives at the end location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof RouteOptimizationLeg
     */
    arrival?: Date;
    /**
     * A list of breaks taken while travelling from the start location to the end location.
     * @type {Array<RouteOptimizationBreak>}
     * @memberof RouteOptimizationLeg
     */
    breaks?: Array<RouteOptimizationBreak>;
    /**
     * The distance [m] travelled between the start location and end location.
     * @type {number}
     * @memberof RouteOptimizationLeg
     */
    distance?: number;
    /**
     * The duration [s] it takes to drive from the start location to the end location.
     * @type {number}
     * @memberof RouteOptimizationLeg
     */
    drivingDuration?: number;
}

/**
 * Check if a given object implements the RouteOptimizationLeg interface.
 */
export function instanceOfRouteOptimizationLeg(value: object): boolean {
    return true;
}

export function RouteOptimizationLegFromJSON(json: any): RouteOptimizationLeg {
    return RouteOptimizationLegFromJSONTyped(json, false);
}

export function RouteOptimizationLegFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationLeg {
    if (json == null) {
        return json;
    }
    return {
        
        'startLocationId': json['startLocationId'] == null ? undefined : json['startLocationId'],
        'departure': json['departure'] == null ? undefined : (new Date(json['departure'])),
        'endLocationId': json['endLocationId'] == null ? undefined : json['endLocationId'],
        'arrival': json['arrival'] == null ? undefined : (new Date(json['arrival'])),
        'breaks': json['breaks'] == null ? undefined : ((json['breaks'] as Array<any>).map(RouteOptimizationBreakFromJSON)),
        'distance': json['distance'] == null ? undefined : json['distance'],
        'drivingDuration': json['drivingDuration'] == null ? undefined : json['drivingDuration'],
    };
}

export function RouteOptimizationLegToJSON(value?: RouteOptimizationLeg | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'startLocationId': value['startLocationId'],
        'departure': value['departure'] == null ? undefined : ((value['departure']).toISOString()),
        'endLocationId': value['endLocationId'],
        'arrival': value['arrival'] == null ? undefined : ((value['arrival']).toISOString()),
        'breaks': value['breaks'] == null ? undefined : ((value['breaks'] as Array<any>).map(RouteOptimizationBreakToJSON)),
        'distance': value['distance'],
        'drivingDuration': value['drivingDuration'],
    };
}

