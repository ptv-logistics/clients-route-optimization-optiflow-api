/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RouteOptimizationConstraints } from './RouteOptimizationConstraints';
import {
    RouteOptimizationConstraintsFromJSON,
    RouteOptimizationConstraintsFromJSONTyped,
    RouteOptimizationConstraintsToJSON,
} from './RouteOptimizationConstraints';
import type { RouteOptimizationDepot } from './RouteOptimizationDepot';
import {
    RouteOptimizationDepotFromJSON,
    RouteOptimizationDepotFromJSONTyped,
    RouteOptimizationDepotToJSON,
} from './RouteOptimizationDepot';
import type { RouteOptimizationLocation } from './RouteOptimizationLocation';
import {
    RouteOptimizationLocationFromJSON,
    RouteOptimizationLocationFromJSONTyped,
    RouteOptimizationLocationToJSON,
} from './RouteOptimizationLocation';
import type { RouteOptimizationOptimizationRequestMetadata } from './RouteOptimizationOptimizationRequestMetadata';
import {
    RouteOptimizationOptimizationRequestMetadataFromJSON,
    RouteOptimizationOptimizationRequestMetadataFromJSONTyped,
    RouteOptimizationOptimizationRequestMetadataToJSON,
} from './RouteOptimizationOptimizationRequestMetadata';
import type { RouteOptimizationOptimizationSettings } from './RouteOptimizationOptimizationSettings';
import {
    RouteOptimizationOptimizationSettingsFromJSON,
    RouteOptimizationOptimizationSettingsFromJSONTyped,
    RouteOptimizationOptimizationSettingsToJSON,
} from './RouteOptimizationOptimizationSettings';
import type { RouteOptimizationOrders } from './RouteOptimizationOrders';
import {
    RouteOptimizationOrdersFromJSON,
    RouteOptimizationOrdersFromJSONTyped,
    RouteOptimizationOrdersToJSON,
} from './RouteOptimizationOrders';
import type { RouteOptimizationRouteStructure } from './RouteOptimizationRouteStructure';
import {
    RouteOptimizationRouteStructureFromJSON,
    RouteOptimizationRouteStructureFromJSONTyped,
    RouteOptimizationRouteStructureToJSON,
} from './RouteOptimizationRouteStructure';
import type { RouteOptimizationRules } from './RouteOptimizationRules';
import {
    RouteOptimizationRulesFromJSON,
    RouteOptimizationRulesFromJSONTyped,
    RouteOptimizationRulesToJSON,
} from './RouteOptimizationRules';
import type { RouteOptimizationVehicle } from './RouteOptimizationVehicle';
import {
    RouteOptimizationVehicleFromJSON,
    RouteOptimizationVehicleFromJSONTyped,
    RouteOptimizationVehicleToJSON,
} from './RouteOptimizationVehicle';

/**
 * The request data needed to start an optimization.
 * @export
 * @interface RouteOptimizationOptimizationRequest
 */
export interface RouteOptimizationOptimizationRequest {
    /**
     * 
     * @type {RouteOptimizationOptimizationSettings}
     * @memberof RouteOptimizationOptimizationRequest
     */
    settings: RouteOptimizationOptimizationSettings;
    /**
     * A list of locations where goods have to be picked up or delivered, or where vehicles are located.
     * Please note that the upper bound on number of locations is a technical limit. Check your individual price plan or contract to see which limits apply.
     * @type {Array<RouteOptimizationLocation>}
     * @memberof RouteOptimizationOptimizationRequest
     */
    locations: Array<RouteOptimizationLocation>;
    /**
     * 
     * @type {RouteOptimizationOrders}
     * @memberof RouteOptimizationOptimizationRequest
     */
    orders: RouteOptimizationOrders;
    /**
     * A list of vehicles that can be used by optimization to schedule routes. Optimization can only assign a single route to a vehicle and must respect the properties and constraints of the vehicle.
     * Please note that the upper bound on number of vehicles is a technical limit. Check your individual price plan or contract to see which limits apply.
     * @type {Array<RouteOptimizationVehicle>}
     * @memberof RouteOptimizationOptimizationRequest
     */
    vehicles: Array<RouteOptimizationVehicle>;
    /**
     * A list of depots where pickup orders can be delivered to or delivery orders can be picked up from. When providing pickup or delivery orders, at least one depot must be specified. Depots must not be specified when all orders are pickup-delivery orders. When stopping at a depot, all pickup orders present in the vehicle are unloaded first. Afterwards, delivery orders can be loaded into the vehicle. Those must be delivered before stopping at the next depot.
     * @type {Array<RouteOptimizationDepot>}
     * @memberof RouteOptimizationOptimizationRequest
     */
    depots?: Array<RouteOptimizationDepot>;
    /**
     * A list of routes that should be reconstructed prior to optimization.
     * Reconstruction ensures all constraints are met and may involve removing orders, changing breaks, or adjusting the start time of the route.
     * After the reconstruction, the optimization will try to improve the routes.
     * The structure of the routes can be changed by the optimization as long as the constraints are satisfied.
     * Check your individual price plan or contract to see whether or not the request may contain routes.
     * @type {Array<RouteOptimizationRouteStructure>}
     * @memberof RouteOptimizationOptimizationRequest
     */
    routes?: Array<RouteOptimizationRouteStructure>;
    /**
     * 
     * @type {RouteOptimizationConstraints}
     * @memberof RouteOptimizationOptimizationRequest
     */
    constraints?: RouteOptimizationConstraints;
    /**
     * 
     * @type {RouteOptimizationRules}
     * @memberof RouteOptimizationOptimizationRequest
     */
    rules?: RouteOptimizationRules;
    /**
     * 
     * @type {RouteOptimizationOptimizationRequestMetadata}
     * @memberof RouteOptimizationOptimizationRequest
     */
    metadata?: RouteOptimizationOptimizationRequestMetadata;
}

/**
 * Check if a given object implements the RouteOptimizationOptimizationRequest interface.
 */
export function instanceOfRouteOptimizationOptimizationRequest(value: object): boolean {
    if (!('settings' in value)) return false;
    if (!('locations' in value)) return false;
    if (!('orders' in value)) return false;
    if (!('vehicles' in value)) return false;
    return true;
}

export function RouteOptimizationOptimizationRequestFromJSON(json: any): RouteOptimizationOptimizationRequest {
    return RouteOptimizationOptimizationRequestFromJSONTyped(json, false);
}

export function RouteOptimizationOptimizationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationOptimizationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'settings': RouteOptimizationOptimizationSettingsFromJSON(json['settings']),
        'locations': ((json['locations'] as Array<any>).map(RouteOptimizationLocationFromJSON)),
        'orders': RouteOptimizationOrdersFromJSON(json['orders']),
        'vehicles': ((json['vehicles'] as Array<any>).map(RouteOptimizationVehicleFromJSON)),
        'depots': json['depots'] == null ? undefined : ((json['depots'] as Array<any>).map(RouteOptimizationDepotFromJSON)),
        'routes': json['routes'] == null ? undefined : ((json['routes'] as Array<any>).map(RouteOptimizationRouteStructureFromJSON)),
        'constraints': json['constraints'] == null ? undefined : RouteOptimizationConstraintsFromJSON(json['constraints']),
        'rules': json['rules'] == null ? undefined : RouteOptimizationRulesFromJSON(json['rules']),
        'metadata': json['metadata'] == null ? undefined : RouteOptimizationOptimizationRequestMetadataFromJSON(json['metadata']),
    };
}

export function RouteOptimizationOptimizationRequestToJSON(value?: RouteOptimizationOptimizationRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'settings': RouteOptimizationOptimizationSettingsToJSON(value['settings']),
        'locations': ((value['locations'] as Array<any>).map(RouteOptimizationLocationToJSON)),
        'orders': RouteOptimizationOrdersToJSON(value['orders']),
        'vehicles': ((value['vehicles'] as Array<any>).map(RouteOptimizationVehicleToJSON)),
        'depots': value['depots'] == null ? undefined : ((value['depots'] as Array<any>).map(RouteOptimizationDepotToJSON)),
        'routes': value['routes'] == null ? undefined : ((value['routes'] as Array<any>).map(RouteOptimizationRouteStructureToJSON)),
        'constraints': RouteOptimizationConstraintsToJSON(value['constraints']),
        'rules': RouteOptimizationRulesToJSON(value['rules']),
        'metadata': RouteOptimizationOptimizationRequestMetadataToJSON(value['metadata']),
    };
}

