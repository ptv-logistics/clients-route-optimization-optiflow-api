/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RouteOptimizationBreak } from './RouteOptimizationBreak';
import {
    RouteOptimizationBreakFromJSON,
    RouteOptimizationBreakFromJSONTyped,
    RouteOptimizationBreakToJSON,
} from './RouteOptimizationBreak';
import type { RouteOptimizationTask } from './RouteOptimizationTask';
import {
    RouteOptimizationTaskFromJSON,
    RouteOptimizationTaskFromJSONTyped,
    RouteOptimizationTaskToJSON,
} from './RouteOptimizationTask';

/**
 * A collection of consecutive tasks that are allocated to a time slot.
 * @export
 * @interface RouteOptimizationAppointment
 */
export interface RouteOptimizationAppointment {
    /**
     * The unique identifier of the time slot this appointment is assigned to.
     * @type {string}
     * @memberof RouteOptimizationAppointment
     */
    timeSlotId?: string;
    /**
     * A list of breaks that are scheduled to be taken before the appointment.
     * @type {Array<RouteOptimizationBreak>}
     * @memberof RouteOptimizationAppointment
     */
    breaks?: Array<RouteOptimizationBreak>;
    /**
     * The duration [s] of the waiting period before the appointment can start.
     * @type {number}
     * @memberof RouteOptimizationAppointment
     */
    waitingDuration?: number;
    /**
     * The point in time when the appointment starts. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof RouteOptimizationAppointment
     */
    start?: Date;
    /**
     * The duration [s] of the preparation period before the first task can start. This is determined by the allocated time slot.
     * @type {number}
     * @memberof RouteOptimizationAppointment
     */
    preparationDuration?: number;
    /**
     * The list of tasks that are scheduled to be executed within this appointment. Each task can either be a pickup or a delivery. For every order scheduled on the route, the route will contain a task describing the pickup of the order and a task describing the delivery of the order. When the order is a pickup order (resp. delivery order), its delivery task (resp. pickup task) will be scheduled at a depot.
     * @type {Array<RouteOptimizationTask>}
     * @memberof RouteOptimizationAppointment
     */
    tasks?: Array<RouteOptimizationTask>;
    /**
     * The point in time when the appointment ends. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof RouteOptimizationAppointment
     */
    end?: Date;
}

/**
 * Check if a given object implements the RouteOptimizationAppointment interface.
 */
export function instanceOfRouteOptimizationAppointment(value: object): boolean {
    return true;
}

export function RouteOptimizationAppointmentFromJSON(json: any): RouteOptimizationAppointment {
    return RouteOptimizationAppointmentFromJSONTyped(json, false);
}

export function RouteOptimizationAppointmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteOptimizationAppointment {
    if (json == null) {
        return json;
    }
    return {
        
        'timeSlotId': json['timeSlotId'] == null ? undefined : json['timeSlotId'],
        'breaks': json['breaks'] == null ? undefined : ((json['breaks'] as Array<any>).map(RouteOptimizationBreakFromJSON)),
        'waitingDuration': json['waitingDuration'] == null ? undefined : json['waitingDuration'],
        'start': json['start'] == null ? undefined : (new Date(json['start'])),
        'preparationDuration': json['preparationDuration'] == null ? undefined : json['preparationDuration'],
        'tasks': json['tasks'] == null ? undefined : ((json['tasks'] as Array<any>).map(RouteOptimizationTaskFromJSON)),
        'end': json['end'] == null ? undefined : (new Date(json['end'])),
    };
}

export function RouteOptimizationAppointmentToJSON(value?: RouteOptimizationAppointment | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'timeSlotId': value['timeSlotId'],
        'breaks': value['breaks'] == null ? undefined : ((value['breaks'] as Array<any>).map(RouteOptimizationBreakToJSON)),
        'waitingDuration': value['waitingDuration'],
        'start': value['start'] == null ? undefined : ((value['start']).toISOString()),
        'preparationDuration': value['preparationDuration'],
        'tasks': value['tasks'] == null ? undefined : ((value['tasks'] as Array<any>).map(RouteOptimizationTaskToJSON)),
        'end': value['end'] == null ? undefined : ((value['end']).toISOString()),
    };
}

