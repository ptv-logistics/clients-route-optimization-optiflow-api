/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.12
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// A constraint on the combination of depots and vehicles belonging to a certain category.
    /// </summary>
    [DataContract(Name = "DepotVehicleCombinationConstraint")]
    public partial class RouteOptimizationDepotVehicleCombinationConstraint : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public RouteOptimizationDepotVehicleCombinationConstraintType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationDepotVehicleCombinationConstraint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteOptimizationDepotVehicleCombinationConstraint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationDepotVehicleCombinationConstraint" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="depotCategory">The category of depots to which the constraint applies. The constraint will be ignored when no depot belongs to this category. (required).</param>
        /// <param name="vehicleCategory">The category of vehicles to which the constraint applies. The constraint will be ignored when no vehicle belongs to this category. (required).</param>
        public RouteOptimizationDepotVehicleCombinationConstraint(RouteOptimizationDepotVehicleCombinationConstraintType type = default(RouteOptimizationDepotVehicleCombinationConstraintType), string depotCategory = default(string), string vehicleCategory = default(string))
        {
            this.Type = type;
            // to ensure "depotCategory" is required (not null)
            if (depotCategory == null)
            {
                throw new ArgumentNullException("depotCategory is a required property for RouteOptimizationDepotVehicleCombinationConstraint and cannot be null");
            }
            this.DepotCategory = depotCategory;
            // to ensure "vehicleCategory" is required (not null)
            if (vehicleCategory == null)
            {
                throw new ArgumentNullException("vehicleCategory is a required property for RouteOptimizationDepotVehicleCombinationConstraint and cannot be null");
            }
            this.VehicleCategory = vehicleCategory;
        }

        /// <summary>
        /// The category of depots to which the constraint applies. The constraint will be ignored when no depot belongs to this category.
        /// </summary>
        /// <value>The category of depots to which the constraint applies. The constraint will be ignored when no depot belongs to this category.</value>
        /// <example>NO_LOADING_BAY</example>
        [DataMember(Name = "depotCategory", IsRequired = true, EmitDefaultValue = true)]
        public string DepotCategory { get; set; }

        /// <summary>
        /// The category of vehicles to which the constraint applies. The constraint will be ignored when no vehicle belongs to this category.
        /// </summary>
        /// <value>The category of vehicles to which the constraint applies. The constraint will be ignored when no vehicle belongs to this category.</value>
        /// <example>FORK_LIFT</example>
        [DataMember(Name = "vehicleCategory", IsRequired = true, EmitDefaultValue = true)]
        public string VehicleCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationDepotVehicleCombinationConstraint {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DepotCategory: ").Append(DepotCategory).Append("\n");
            sb.Append("  VehicleCategory: ").Append(VehicleCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DepotCategory (string) maxLength
            if (this.DepotCategory != null && this.DepotCategory.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepotCategory, length must be less than 36.", new [] { "DepotCategory" });
            }

            // DepotCategory (string) minLength
            if (this.DepotCategory != null && this.DepotCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepotCategory, length must be greater than 1.", new [] { "DepotCategory" });
            }

            if (this.DepotCategory != null) {
                // DepotCategory (string) pattern
                Regex regexDepotCategory = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexDepotCategory.Match(this.DepotCategory).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepotCategory, must match a pattern of " + regexDepotCategory, new [] { "DepotCategory" });
                }
            }

            // VehicleCategory (string) maxLength
            if (this.VehicleCategory != null && this.VehicleCategory.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleCategory, length must be less than 36.", new [] { "VehicleCategory" });
            }

            // VehicleCategory (string) minLength
            if (this.VehicleCategory != null && this.VehicleCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleCategory, length must be greater than 1.", new [] { "VehicleCategory" });
            }

            if (this.VehicleCategory != null) {
                // VehicleCategory (string) pattern
                Regex regexVehicleCategory = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexVehicleCategory.Match(this.VehicleCategory).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleCategory, must match a pattern of " + regexVehicleCategory, new [] { "VehicleCategory" });
                }
            }

            yield break;
        }
    }

}
