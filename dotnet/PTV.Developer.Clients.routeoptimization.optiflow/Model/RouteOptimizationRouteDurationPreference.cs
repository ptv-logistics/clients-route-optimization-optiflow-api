/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// Describes a preference towards a specific route duration of the vehicle.
    /// </summary>
    [DataContract(Name = "RouteDurationPreference")]
    public partial class RouteOptimizationRouteDurationPreference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationRouteDurationPreference" /> class.
        /// </summary>
        /// <param name="importance">A scale between 0 and 1 resembling a tradeoff between minimizing the total hour cost and steering towards the preferred duration of the vehicle. Higher values indicate a stronger preference for a route duration close to the preferred one. As the cost per hour increases, the influence of this tradeoff becomes more significant. (default to 0D).</param>
        /// <param name="preferredDuration">The preferred duration [s] of the route assigned to the vehicle. If omitted, the preferred route duration of this vehicle is the average route duration..</param>
        public RouteOptimizationRouteDurationPreference(double? importance = 0D, int? preferredDuration = default(int?))
        {
            // use default value if no "importance" provided
            this.Importance = importance ?? 0D;
            this.PreferredDuration = preferredDuration;
        }

        /// <summary>
        /// A scale between 0 and 1 resembling a tradeoff between minimizing the total hour cost and steering towards the preferred duration of the vehicle. Higher values indicate a stronger preference for a route duration close to the preferred one. As the cost per hour increases, the influence of this tradeoff becomes more significant.
        /// </summary>
        /// <value>A scale between 0 and 1 resembling a tradeoff between minimizing the total hour cost and steering towards the preferred duration of the vehicle. Higher values indicate a stronger preference for a route duration close to the preferred one. As the cost per hour increases, the influence of this tradeoff becomes more significant.</value>
        /// <example>0.5</example>
        [DataMember(Name = "importance", EmitDefaultValue = true)]
        public double? Importance { get; set; }

        /// <summary>
        /// The preferred duration [s] of the route assigned to the vehicle. If omitted, the preferred route duration of this vehicle is the average route duration.
        /// </summary>
        /// <value>The preferred duration [s] of the route assigned to the vehicle. If omitted, the preferred route duration of this vehicle is the average route duration.</value>
        /// <example>28800</example>
        [DataMember(Name = "preferredDuration", EmitDefaultValue = true)]
        public int? PreferredDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationRouteDurationPreference {\n");
            sb.Append("  Importance: ").Append(Importance).Append("\n");
            sb.Append("  PreferredDuration: ").Append(PreferredDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Importance (double?) maximum
            if (this.Importance > (double?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Importance, must be a value less than or equal to 1.", new [] { "Importance" });
            }

            // Importance (double?) minimum
            if (this.Importance < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Importance, must be a value greater than or equal to 0.", new [] { "Importance" });
            }

            // PreferredDuration (int?) minimum
            if (this.PreferredDuration < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreferredDuration, must be a value greater than or equal to 1.", new [] { "PreferredDuration" });
            }

            yield break;
        }
    }

}
