/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// RouteOptimizationErrorResponse
    /// </summary>
    [DataContract(Name = "ErrorResponse")]
    public partial class RouteOptimizationErrorResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationErrorResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteOptimizationErrorResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationErrorResponse" /> class.
        /// </summary>
        /// <param name="traceId">A unique identifier of the corresponding trace forest. It can be used to trace errors by the support. (required).</param>
        /// <param name="errorId">A unique identifier specific to this error instance. It can be used to trace errors by the support..</param>
        /// <param name="description">A human readable message that describes the error. (required).</param>
        /// <param name="errorCode">A constant string that can be used to identify this error class programmatically.  If additional information is available for an errorCode, it will be provided as key-value pairs with the parameter **details**. The keys available for a specific errorCode are documented directly with the errorCode. Unless stated otherwise, the values are of type string.  As an example, the following errorCode provides one key-value pair in the **details**. The key is called **message**. * &#x60;GENERAL_UNAUTHENTICATED&#x60; - Invalid or missing authentication credentials.   * &#x60;message&#x60; - An additional error message.  Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **HTTP status code: 400** * &#x60;GENERAL_VALIDATION_ERROR&#x60; - The validation of the request failed. Details can be found in **causes**. * &#x60;GENERAL_PARSING_ERROR&#x60; - The JSON syntax is invalid.  **HTTP status code: 401** * &#x60;GENERAL_UNAUTHENTICATED&#x60; - Invalid or missing authentication credentials.   * &#x60;message&#x60; - An additional error message.  **HTTP status code: 403** * &#x60;GENERAL_FORBIDDEN&#x60; - Insufficient access rights. * &#x60;GENERAL_QUOTA_EXCEEDED&#x60; - The transaction limit is exceeded.   * &#x60;message&#x60; - An additional error message. * &#x60;ROUTE_OPTIMIZATION_RESTRICTION_EXCEEDED&#x60; - A product-specific restriction is exceeded.  **HTTP status code: 404** * &#x60;GENERAL_RESOURCE_NOT_FOUND&#x60; - A requested resource does not exist.   * &#x60;message&#x60; - An additional error message.  **HTTP status code: 413** * &#x60;GENERAL_CONTENT_TOO_LARGE&#x60; - The request is too large.   * &#x60;limit&#x60; - The maximum size of the request.  **HTTP status code: 415** * &#x60;GENERAL_UNSUPPORTED_MEDIA_TYPE&#x60; - The content format of the request is not supported. Details can be found in &#39;causes&#39;.  **HTTP status code: 429** * &#x60;GENERAL_RATE_LIMIT_EXCEEDED&#x60; - The rate limit is exceeded.  **HTTP status code: 500** * &#x60;GENERAL_INTERNAL_SERVER_ERROR&#x60; - The request could not be processed due to an internal error.   * &#x60;message&#x60; - An additional error message.   * &#x60;hint&#x60; - A hint how to solve the problem.  **HTTP status code: 503** * &#x60;GENERAL_SERVICE_UNAVAILABLE&#x60; - The service is temporarily unavailable.  **HTTP status code: 4xx-5xx**  * &#x60;GENERAL_INTERNAL_GATEWAY_ERROR&#x60; - The request could not be processed due to an internal gateway error.   * &#x60;hint&#x60; - A hint how to solve the problem. (required).</param>
        /// <param name="causes">A list of affected parameters and/or properties that caused this error..</param>
        /// <param name="details">Additional properties specific to this error class..</param>
        public RouteOptimizationErrorResponse(string traceId = default(string), string errorId = default(string), string description = default(string), string errorCode = default(string), List<RouteOptimizationCausingError> causes = default(List<RouteOptimizationCausingError>), Dictionary<string, Object> details = default(Dictionary<string, Object>))
        {
            // to ensure "traceId" is required (not null)
            if (traceId == null)
            {
                throw new ArgumentNullException("traceId is a required property for RouteOptimizationErrorResponse and cannot be null");
            }
            this.TraceId = traceId;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for RouteOptimizationErrorResponse and cannot be null");
            }
            this.Description = description;
            // to ensure "errorCode" is required (not null)
            if (errorCode == null)
            {
                throw new ArgumentNullException("errorCode is a required property for RouteOptimizationErrorResponse and cannot be null");
            }
            this.ErrorCode = errorCode;
            this.ErrorId = errorId;
            this.Causes = causes;
            this.Details = details;
        }

        /// <summary>
        /// A unique identifier of the corresponding trace forest. It can be used to trace errors by the support.
        /// </summary>
        /// <value>A unique identifier of the corresponding trace forest. It can be used to trace errors by the support.</value>
        [DataMember(Name = "traceId", IsRequired = true, EmitDefaultValue = true)]
        public string TraceId { get; set; }

        /// <summary>
        /// A unique identifier specific to this error instance. It can be used to trace errors by the support.
        /// </summary>
        /// <value>A unique identifier specific to this error instance. It can be used to trace errors by the support.</value>
        [DataMember(Name = "errorId", EmitDefaultValue = true)]
        public string ErrorId { get; set; }

        /// <summary>
        /// A human readable message that describes the error.
        /// </summary>
        /// <value>A human readable message that describes the error.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// A constant string that can be used to identify this error class programmatically.  If additional information is available for an errorCode, it will be provided as key-value pairs with the parameter **details**. The keys available for a specific errorCode are documented directly with the errorCode. Unless stated otherwise, the values are of type string.  As an example, the following errorCode provides one key-value pair in the **details**. The key is called **message**. * &#x60;GENERAL_UNAUTHENTICATED&#x60; - Invalid or missing authentication credentials.   * &#x60;message&#x60; - An additional error message.  Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **HTTP status code: 400** * &#x60;GENERAL_VALIDATION_ERROR&#x60; - The validation of the request failed. Details can be found in **causes**. * &#x60;GENERAL_PARSING_ERROR&#x60; - The JSON syntax is invalid.  **HTTP status code: 401** * &#x60;GENERAL_UNAUTHENTICATED&#x60; - Invalid or missing authentication credentials.   * &#x60;message&#x60; - An additional error message.  **HTTP status code: 403** * &#x60;GENERAL_FORBIDDEN&#x60; - Insufficient access rights. * &#x60;GENERAL_QUOTA_EXCEEDED&#x60; - The transaction limit is exceeded.   * &#x60;message&#x60; - An additional error message. * &#x60;ROUTE_OPTIMIZATION_RESTRICTION_EXCEEDED&#x60; - A product-specific restriction is exceeded.  **HTTP status code: 404** * &#x60;GENERAL_RESOURCE_NOT_FOUND&#x60; - A requested resource does not exist.   * &#x60;message&#x60; - An additional error message.  **HTTP status code: 413** * &#x60;GENERAL_CONTENT_TOO_LARGE&#x60; - The request is too large.   * &#x60;limit&#x60; - The maximum size of the request.  **HTTP status code: 415** * &#x60;GENERAL_UNSUPPORTED_MEDIA_TYPE&#x60; - The content format of the request is not supported. Details can be found in &#39;causes&#39;.  **HTTP status code: 429** * &#x60;GENERAL_RATE_LIMIT_EXCEEDED&#x60; - The rate limit is exceeded.  **HTTP status code: 500** * &#x60;GENERAL_INTERNAL_SERVER_ERROR&#x60; - The request could not be processed due to an internal error.   * &#x60;message&#x60; - An additional error message.   * &#x60;hint&#x60; - A hint how to solve the problem.  **HTTP status code: 503** * &#x60;GENERAL_SERVICE_UNAVAILABLE&#x60; - The service is temporarily unavailable.  **HTTP status code: 4xx-5xx**  * &#x60;GENERAL_INTERNAL_GATEWAY_ERROR&#x60; - The request could not be processed due to an internal gateway error.   * &#x60;hint&#x60; - A hint how to solve the problem.
        /// </summary>
        /// <value>A constant string that can be used to identify this error class programmatically.  If additional information is available for an errorCode, it will be provided as key-value pairs with the parameter **details**. The keys available for a specific errorCode are documented directly with the errorCode. Unless stated otherwise, the values are of type string.  As an example, the following errorCode provides one key-value pair in the **details**. The key is called **message**. * &#x60;GENERAL_UNAUTHENTICATED&#x60; - Invalid or missing authentication credentials.   * &#x60;message&#x60; - An additional error message.  Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **HTTP status code: 400** * &#x60;GENERAL_VALIDATION_ERROR&#x60; - The validation of the request failed. Details can be found in **causes**. * &#x60;GENERAL_PARSING_ERROR&#x60; - The JSON syntax is invalid.  **HTTP status code: 401** * &#x60;GENERAL_UNAUTHENTICATED&#x60; - Invalid or missing authentication credentials.   * &#x60;message&#x60; - An additional error message.  **HTTP status code: 403** * &#x60;GENERAL_FORBIDDEN&#x60; - Insufficient access rights. * &#x60;GENERAL_QUOTA_EXCEEDED&#x60; - The transaction limit is exceeded.   * &#x60;message&#x60; - An additional error message. * &#x60;ROUTE_OPTIMIZATION_RESTRICTION_EXCEEDED&#x60; - A product-specific restriction is exceeded.  **HTTP status code: 404** * &#x60;GENERAL_RESOURCE_NOT_FOUND&#x60; - A requested resource does not exist.   * &#x60;message&#x60; - An additional error message.  **HTTP status code: 413** * &#x60;GENERAL_CONTENT_TOO_LARGE&#x60; - The request is too large.   * &#x60;limit&#x60; - The maximum size of the request.  **HTTP status code: 415** * &#x60;GENERAL_UNSUPPORTED_MEDIA_TYPE&#x60; - The content format of the request is not supported. Details can be found in &#39;causes&#39;.  **HTTP status code: 429** * &#x60;GENERAL_RATE_LIMIT_EXCEEDED&#x60; - The rate limit is exceeded.  **HTTP status code: 500** * &#x60;GENERAL_INTERNAL_SERVER_ERROR&#x60; - The request could not be processed due to an internal error.   * &#x60;message&#x60; - An additional error message.   * &#x60;hint&#x60; - A hint how to solve the problem.  **HTTP status code: 503** * &#x60;GENERAL_SERVICE_UNAVAILABLE&#x60; - The service is temporarily unavailable.  **HTTP status code: 4xx-5xx**  * &#x60;GENERAL_INTERNAL_GATEWAY_ERROR&#x60; - The request could not be processed due to an internal gateway error.   * &#x60;hint&#x60; - A hint how to solve the problem.</value>
        [DataMember(Name = "errorCode", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// A list of affected parameters and/or properties that caused this error.
        /// </summary>
        /// <value>A list of affected parameters and/or properties that caused this error.</value>
        [DataMember(Name = "causes", EmitDefaultValue = false)]
        public List<RouteOptimizationCausingError> Causes { get; set; }

        /// <summary>
        /// Additional properties specific to this error class.
        /// </summary>
        /// <value>Additional properties specific to this error class.</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public Dictionary<string, Object> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationErrorResponse {\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  ErrorId: ").Append(ErrorId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Causes: ").Append(Causes).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
