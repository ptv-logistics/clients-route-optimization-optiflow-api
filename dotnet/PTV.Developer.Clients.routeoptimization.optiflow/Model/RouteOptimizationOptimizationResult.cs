/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.12
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// The current result of the optimization.
    /// </summary>
    [DataContract(Name = "OptimizationResult")]
    public partial class RouteOptimizationOptimizationResult : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public RouteOptimizationOptimizationStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationOptimizationResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteOptimizationOptimizationResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationOptimizationResult" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the optimization. (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="routes">The routes scheduled by the optimization.As long as the optimization is not yet &#x60;SUCCEEDED&#x60;, scheduled routes may be only an intermediate result..</param>
        /// <param name="metrics">metrics.</param>
        /// <param name="error">error.</param>
        /// <param name="warnings">A list of warnings concerning the optimization..</param>
        public RouteOptimizationOptimizationResult(Guid? id = default(Guid?), RouteOptimizationOptimizationStatus status = default(RouteOptimizationOptimizationStatus), List<RouteOptimizationRoute> routes = default(List<RouteOptimizationRoute>), RouteOptimizationMetrics metrics = default(RouteOptimizationMetrics), RouteOptimizationError error = default(RouteOptimizationError), List<RouteOptimizationWarning> warnings = default(List<RouteOptimizationWarning>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for RouteOptimizationOptimizationResult and cannot be null");
            }
            this.Id = id;
            this.Status = status;
            this.Routes = routes;
            this.Metrics = metrics;
            this.Error = error;
            this.Warnings = warnings;
        }

        /// <summary>
        /// The unique identifier of the optimization.
        /// </summary>
        /// <value>The unique identifier of the optimization.</value>
        /// <example>acde070d-8c4c-4f0d-9d8a-162843c10333</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid? Id { get; set; }

        /// <summary>
        /// The routes scheduled by the optimization.As long as the optimization is not yet &#x60;SUCCEEDED&#x60;, scheduled routes may be only an intermediate result.
        /// </summary>
        /// <value>The routes scheduled by the optimization.As long as the optimization is not yet &#x60;SUCCEEDED&#x60;, scheduled routes may be only an intermediate result.</value>
        [DataMember(Name = "routes", EmitDefaultValue = false)]
        public List<RouteOptimizationRoute> Routes { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public RouteOptimizationMetrics Metrics { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public RouteOptimizationError Error { get; set; }

        /// <summary>
        /// A list of warnings concerning the optimization.
        /// </summary>
        /// <value>A list of warnings concerning the optimization.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<RouteOptimizationWarning> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationOptimizationResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
