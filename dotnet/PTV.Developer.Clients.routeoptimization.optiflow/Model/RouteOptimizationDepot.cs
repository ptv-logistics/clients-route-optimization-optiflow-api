/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// A depot where pickup orders can be delivered to or delivery orders can be picked up from. When stopping at a depot, all pickup orders present in the vehicle are unloaded first. Afterwards delivery orders can be loaded in the vehicle, which must be delivered before stopping at the next depot. When providing pickup or delivery orders, at least one depot should be specified. When providing pickup-delivery orders, no tasks happen at the depot and depots must be omitted.
    /// </summary>
    [DataContract(Name = "Depot")]
    public partial class RouteOptimizationDepot : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationDepot" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteOptimizationDepot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationDepot" /> class.
        /// </summary>
        /// <param name="id">A unique identifier of the depot. (required).</param>
        /// <param name="locationId">The unique identifier of the location where the depot is situated. (required).</param>
        /// <param name="timeSlotIds">A list of unique identifiers of the time slots of the depot location that can be used to execute tasks at this depot. When empty all time slots can be used. If more than 50 time slots are specified for the depot location, the list must not be empty..</param>
        /// <param name="categories">A list of categories the depot belongs to that can be used to describe constraints or rules..</param>
        public RouteOptimizationDepot(string id = default(string), string locationId = default(string), List<string> timeSlotIds = default(List<string>), List<string> categories = default(List<string>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for RouteOptimizationDepot and cannot be null");
            }
            this.Id = id;
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new ArgumentNullException("locationId is a required property for RouteOptimizationDepot and cannot be null");
            }
            this.LocationId = locationId;
            this.TimeSlotIds = timeSlotIds;
            this.Categories = categories;
        }

        /// <summary>
        /// A unique identifier of the depot.
        /// </summary>
        /// <value>A unique identifier of the depot.</value>
        /// <example>DEPOT-123</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the location where the depot is situated.
        /// </summary>
        /// <value>The unique identifier of the location where the depot is situated.</value>
        /// <example>GHENT</example>
        [DataMember(Name = "locationId", IsRequired = true, EmitDefaultValue = true)]
        public string LocationId { get; set; }

        /// <summary>
        /// A list of unique identifiers of the time slots of the depot location that can be used to execute tasks at this depot. When empty all time slots can be used. If more than 50 time slots are specified for the depot location, the list must not be empty.
        /// </summary>
        /// <value>A list of unique identifiers of the time slots of the depot location that can be used to execute tasks at this depot. When empty all time slots can be used. If more than 50 time slots are specified for the depot location, the list must not be empty.</value>
        /// <example>[&quot;MORNING&quot;,&quot;NOON&quot;]</example>
        [DataMember(Name = "timeSlotIds", EmitDefaultValue = false)]
        public List<string> TimeSlotIds { get; set; }

        /// <summary>
        /// A list of categories the depot belongs to that can be used to describe constraints or rules.
        /// </summary>
        /// <value>A list of categories the depot belongs to that can be used to describe constraints or rules.</value>
        /// <example>[&quot;GHENT&quot;,&quot;FRESH&quot;]</example>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationDepot {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  TimeSlotIds: ").Append(TimeSlotIds).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 36.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            // LocationId (string) maxLength
            if (this.LocationId != null && this.LocationId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationId, length must be less than 36.", new [] { "LocationId" });
            }

            // LocationId (string) minLength
            if (this.LocationId != null && this.LocationId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationId, length must be greater than 1.", new [] { "LocationId" });
            }

            if (this.LocationId != null) {
                // LocationId (string) pattern
                Regex regexLocationId = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexLocationId.Match(this.LocationId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationId, must match a pattern of " + regexLocationId, new [] { "LocationId" });
                }
            }

            yield break;
        }
    }

}
