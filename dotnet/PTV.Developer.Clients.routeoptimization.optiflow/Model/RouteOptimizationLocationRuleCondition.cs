/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.12
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// A condition used to select which locations should be modified by a rule.  A condition is met if all its properties are matched.
    /// </summary>
    [DataContract(Name = "LocationRuleCondition")]
    public partial class RouteOptimizationLocationRuleCondition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationLocationRuleCondition" /> class.
        /// </summary>
        /// <param name="locationCategory">The rule applies only if the location belongs to this category. When omitted, it applies to all locations..</param>
        /// <param name="previousLocationCategory">The rule applies only if the previous location in the route belongs to this category. When omitted, it applies independently of the previous location..</param>
        /// <param name="vehicleCategory">The rule applies only if the vehicle visiting the location belongs to this category. When omitted, it applies independently of the vehicle visiting the location..</param>
        public RouteOptimizationLocationRuleCondition(string locationCategory = default(string), string previousLocationCategory = default(string), string vehicleCategory = default(string))
        {
            this.LocationCategory = locationCategory;
            this.PreviousLocationCategory = previousLocationCategory;
            this.VehicleCategory = vehicleCategory;
        }

        /// <summary>
        /// The rule applies only if the location belongs to this category. When omitted, it applies to all locations.
        /// </summary>
        /// <value>The rule applies only if the location belongs to this category. When omitted, it applies to all locations.</value>
        /// <example>GERMANY</example>
        [DataMember(Name = "locationCategory", EmitDefaultValue = true)]
        public string LocationCategory { get; set; }

        /// <summary>
        /// The rule applies only if the previous location in the route belongs to this category. When omitted, it applies independently of the previous location.
        /// </summary>
        /// <value>The rule applies only if the previous location in the route belongs to this category. When omitted, it applies independently of the previous location.</value>
        /// <example>BELGIUM</example>
        [DataMember(Name = "previousLocationCategory", EmitDefaultValue = true)]
        public string PreviousLocationCategory { get; set; }

        /// <summary>
        /// The rule applies only if the vehicle visiting the location belongs to this category. When omitted, it applies independently of the vehicle visiting the location.
        /// </summary>
        /// <value>The rule applies only if the vehicle visiting the location belongs to this category. When omitted, it applies independently of the vehicle visiting the location.</value>
        /// <example>BIG_TRUCK</example>
        [DataMember(Name = "vehicleCategory", EmitDefaultValue = true)]
        public string VehicleCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationLocationRuleCondition {\n");
            sb.Append("  LocationCategory: ").Append(LocationCategory).Append("\n");
            sb.Append("  PreviousLocationCategory: ").Append(PreviousLocationCategory).Append("\n");
            sb.Append("  VehicleCategory: ").Append(VehicleCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LocationCategory (string) maxLength
            if (this.LocationCategory != null && this.LocationCategory.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationCategory, length must be less than 36.", new [] { "LocationCategory" });
            }

            // LocationCategory (string) minLength
            if (this.LocationCategory != null && this.LocationCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationCategory, length must be greater than 1.", new [] { "LocationCategory" });
            }

            if (this.LocationCategory != null) {
                // LocationCategory (string) pattern
                Regex regexLocationCategory = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexLocationCategory.Match(this.LocationCategory).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationCategory, must match a pattern of " + regexLocationCategory, new [] { "LocationCategory" });
                }
            }

            // PreviousLocationCategory (string) maxLength
            if (this.PreviousLocationCategory != null && this.PreviousLocationCategory.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreviousLocationCategory, length must be less than 36.", new [] { "PreviousLocationCategory" });
            }

            // PreviousLocationCategory (string) minLength
            if (this.PreviousLocationCategory != null && this.PreviousLocationCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreviousLocationCategory, length must be greater than 1.", new [] { "PreviousLocationCategory" });
            }

            if (this.PreviousLocationCategory != null) {
                // PreviousLocationCategory (string) pattern
                Regex regexPreviousLocationCategory = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexPreviousLocationCategory.Match(this.PreviousLocationCategory).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreviousLocationCategory, must match a pattern of " + regexPreviousLocationCategory, new [] { "PreviousLocationCategory" });
                }
            }

            // VehicleCategory (string) maxLength
            if (this.VehicleCategory != null && this.VehicleCategory.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleCategory, length must be less than 36.", new [] { "VehicleCategory" });
            }

            // VehicleCategory (string) minLength
            if (this.VehicleCategory != null && this.VehicleCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleCategory, length must be greater than 1.", new [] { "VehicleCategory" });
            }

            if (this.VehicleCategory != null) {
                // VehicleCategory (string) pattern
                Regex regexVehicleCategory = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexVehicleCategory.Match(this.VehicleCategory).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleCategory, must match a pattern of " + regexVehicleCategory, new [] { "VehicleCategory" });
                }
            }

            yield break;
        }
    }

}
