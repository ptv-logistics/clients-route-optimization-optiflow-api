/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// A rule that conditionally modifies location properties.
    /// </summary>
    [DataContract(Name = "LocationRule")]
    public partial class RouteOptimizationLocationRule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationLocationRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteOptimizationLocationRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationLocationRule" /> class.
        /// </summary>
        /// <param name="conditions">A list of conditions that describes when the rule applies. The rule applies if any of the conditions are met. A condition is met if all of its properties are matched. (required).</param>
        /// <param name="preparationDuration">preparationDuration (required).</param>
        public RouteOptimizationLocationRule(List<RouteOptimizationLocationRuleCondition> conditions = default(List<RouteOptimizationLocationRuleCondition>), RouteOptimizationDurationModifier preparationDuration = default(RouteOptimizationDurationModifier))
        {
            // to ensure "conditions" is required (not null)
            if (conditions == null)
            {
                throw new ArgumentNullException("conditions is a required property for RouteOptimizationLocationRule and cannot be null");
            }
            this.Conditions = conditions;
            // to ensure "preparationDuration" is required (not null)
            if (preparationDuration == null)
            {
                throw new ArgumentNullException("preparationDuration is a required property for RouteOptimizationLocationRule and cannot be null");
            }
            this.PreparationDuration = preparationDuration;
        }

        /// <summary>
        /// A list of conditions that describes when the rule applies. The rule applies if any of the conditions are met. A condition is met if all of its properties are matched.
        /// </summary>
        /// <value>A list of conditions that describes when the rule applies. The rule applies if any of the conditions are met. A condition is met if all of its properties are matched.</value>
        [DataMember(Name = "conditions", IsRequired = true, EmitDefaultValue = true)]
        public List<RouteOptimizationLocationRuleCondition> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets PreparationDuration
        /// </summary>
        [DataMember(Name = "preparationDuration", IsRequired = true, EmitDefaultValue = true)]
        public RouteOptimizationDurationModifier PreparationDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationLocationRule {\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  PreparationDuration: ").Append(PreparationDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
