/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// A section of a route where a vehicle travels from one location to another.
    /// </summary>
    [DataContract(Name = "Leg")]
    public partial class RouteOptimizationLeg : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationLeg" /> class.
        /// </summary>
        /// <param name="startLocationId">The unique identifier of the location where the vehicle departs..</param>
        /// <param name="departure">The point in time when the vehicle departs from the start location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)..</param>
        /// <param name="endLocationId">The unique identifier of the location where the vehicle arrives..</param>
        /// <param name="arrival">The point in time when the vehicle arrives at the end location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)..</param>
        /// <param name="breaks">A list of breaks taken while travelling from the start location to the end location..</param>
        /// <param name="distance">The distance [m] travelled between the start location and end location..</param>
        /// <param name="drivingDuration">The duration [s] it takes to drive from the start location to the end location..</param>
        public RouteOptimizationLeg(string startLocationId = default(string), DateTimeOffset? departure = default(DateTimeOffset?), string endLocationId = default(string), DateTimeOffset? arrival = default(DateTimeOffset?), List<RouteOptimizationBreak> breaks = default(List<RouteOptimizationBreak>), int? distance = default(int?), int? drivingDuration = default(int?))
        {
            this.StartLocationId = startLocationId;
            this.Departure = departure;
            this.EndLocationId = endLocationId;
            this.Arrival = arrival;
            this.Breaks = breaks;
            this.Distance = distance;
            this.DrivingDuration = drivingDuration;
        }

        /// <summary>
        /// The unique identifier of the location where the vehicle departs.
        /// </summary>
        /// <value>The unique identifier of the location where the vehicle departs.</value>
        /// <example>GHENT</example>
        [DataMember(Name = "startLocationId", EmitDefaultValue = true)]
        public string StartLocationId { get; set; }

        /// <summary>
        /// The point in time when the vehicle departs from the start location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
        /// </summary>
        /// <value>The point in time when the vehicle departs from the start location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).</value>
        /// <example>2023-10-03T12:00Z</example>
        [DataMember(Name = "departure", EmitDefaultValue = true)]
        public DateTimeOffset? Departure { get; set; }

        /// <summary>
        /// The unique identifier of the location where the vehicle arrives.
        /// </summary>
        /// <value>The unique identifier of the location where the vehicle arrives.</value>
        /// <example>BRUSSELS</example>
        [DataMember(Name = "endLocationId", EmitDefaultValue = true)]
        public string EndLocationId { get; set; }

        /// <summary>
        /// The point in time when the vehicle arrives at the end location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
        /// </summary>
        /// <value>The point in time when the vehicle arrives at the end location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).</value>
        /// <example>2023-10-03T13:00Z</example>
        [DataMember(Name = "arrival", EmitDefaultValue = true)]
        public DateTimeOffset? Arrival { get; set; }

        /// <summary>
        /// A list of breaks taken while travelling from the start location to the end location.
        /// </summary>
        /// <value>A list of breaks taken while travelling from the start location to the end location.</value>
        [DataMember(Name = "breaks", EmitDefaultValue = false)]
        public List<RouteOptimizationBreak> Breaks { get; set; }

        /// <summary>
        /// The distance [m] travelled between the start location and end location.
        /// </summary>
        /// <value>The distance [m] travelled between the start location and end location.</value>
        /// <example>100000</example>
        [DataMember(Name = "distance", EmitDefaultValue = true)]
        public int? Distance { get; set; }

        /// <summary>
        /// The duration [s] it takes to drive from the start location to the end location.
        /// </summary>
        /// <value>The duration [s] it takes to drive from the start location to the end location.</value>
        /// <example>2700</example>
        [DataMember(Name = "drivingDuration", EmitDefaultValue = true)]
        public int? DrivingDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationLeg {\n");
            sb.Append("  StartLocationId: ").Append(StartLocationId).Append("\n");
            sb.Append("  Departure: ").Append(Departure).Append("\n");
            sb.Append("  EndLocationId: ").Append(EndLocationId).Append("\n");
            sb.Append("  Arrival: ").Append(Arrival).Append("\n");
            sb.Append("  Breaks: ").Append(Breaks).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  DrivingDuration: ").Append(DrivingDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StartLocationId (string) maxLength
            if (this.StartLocationId != null && this.StartLocationId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartLocationId, length must be less than 36.", new [] { "StartLocationId" });
            }

            // StartLocationId (string) minLength
            if (this.StartLocationId != null && this.StartLocationId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartLocationId, length must be greater than 1.", new [] { "StartLocationId" });
            }

            if (this.StartLocationId != null) {
                // StartLocationId (string) pattern
                Regex regexStartLocationId = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexStartLocationId.Match(this.StartLocationId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartLocationId, must match a pattern of " + regexStartLocationId, new [] { "StartLocationId" });
                }
            }

            // EndLocationId (string) maxLength
            if (this.EndLocationId != null && this.EndLocationId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndLocationId, length must be less than 36.", new [] { "EndLocationId" });
            }

            // EndLocationId (string) minLength
            if (this.EndLocationId != null && this.EndLocationId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndLocationId, length must be greater than 1.", new [] { "EndLocationId" });
            }

            if (this.EndLocationId != null) {
                // EndLocationId (string) pattern
                Regex regexEndLocationId = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexEndLocationId.Match(this.EndLocationId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndLocationId, must match a pattern of " + regexEndLocationId, new [] { "EndLocationId" });
                }
            }

            // Distance (int?) minimum
            if (this.Distance < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Distance, must be a value greater than or equal to 0.", new [] { "Distance" });
            }

            // DrivingDuration (int?) minimum
            if (this.DrivingDuration < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DrivingDuration, must be a value greater than or equal to 0.", new [] { "DrivingDuration" });
            }

            yield break;
        }
    }

}
