/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// Specifies an increased cost per effort if the route&#39;s repositioning effort goes above a threshold. When two orders are loaded into the same compartment and delivered in the reverse order, we refer to them as a non-last-in-first-out (non-LIFO) pair. Any non-LIFO pair of orders requires repositioning in the vehicle, as the last picked-up order obstructs the first order that needs to be delivered. The effort involved in this repositioning is the minimum effort required for the two orders. The total repositioning effort for the route is the sum of the repositioning efforts for all non-LIFO pairs of orders.
    /// </summary>
    [DataContract(Name = "RepositioningEffortCost")]
    public partial class RouteOptimizationRepositioningEffortCost : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationRepositioningEffortCost" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteOptimizationRepositioningEffortCost() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationRepositioningEffortCost" /> class.
        /// </summary>
        /// <param name="threshold">The threshold for the repositioning effort from which the cost per effort applies. (required).</param>
        /// <param name="extraPerEffort">Specifies the extra cost for every unit of effort above the threshold. If the threshold of multiple repositioning effort costs is exceeded, the extra costs per effort are added. (required).</param>
        public RouteOptimizationRepositioningEffortCost(int? threshold = default(int?), double? extraPerEffort = default(double?))
        {
            // to ensure "threshold" is required (not null)
            if (threshold == null)
            {
                throw new ArgumentNullException("threshold is a required property for RouteOptimizationRepositioningEffortCost and cannot be null");
            }
            this.Threshold = threshold;
            // to ensure "extraPerEffort" is required (not null)
            if (extraPerEffort == null)
            {
                throw new ArgumentNullException("extraPerEffort is a required property for RouteOptimizationRepositioningEffortCost and cannot be null");
            }
            this.ExtraPerEffort = extraPerEffort;
        }

        /// <summary>
        /// The threshold for the repositioning effort from which the cost per effort applies.
        /// </summary>
        /// <value>The threshold for the repositioning effort from which the cost per effort applies.</value>
        [DataMember(Name = "threshold", IsRequired = true, EmitDefaultValue = true)]
        public int? Threshold { get; set; }

        /// <summary>
        /// Specifies the extra cost for every unit of effort above the threshold. If the threshold of multiple repositioning effort costs is exceeded, the extra costs per effort are added.
        /// </summary>
        /// <value>Specifies the extra cost for every unit of effort above the threshold. If the threshold of multiple repositioning effort costs is exceeded, the extra costs per effort are added.</value>
        [DataMember(Name = "extraPerEffort", IsRequired = true, EmitDefaultValue = true)]
        public double? ExtraPerEffort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationRepositioningEffortCost {\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  ExtraPerEffort: ").Append(ExtraPerEffort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Threshold (int?) minimum
            if (this.Threshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Threshold, must be a value greater than or equal to 0.", new [] { "Threshold" });
            }

            // ExtraPerEffort (double?) minimum
            if (this.ExtraPerEffort < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExtraPerEffort, must be a value greater than or equal to 0.", new [] { "ExtraPerEffort" });
            }

            yield break;
        }
    }

}
