/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// Specifies the necessary information needed to schedule a stop at this location. This information is not relevant when the location is the start or end location of a vehicle.
    /// </summary>
    [DataContract(Name = "StopProperties")]
    public partial class RouteOptimizationStopProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationStopProperties" /> class.
        /// </summary>
        /// <param name="preparationDuration">Defines a duration [s] that is needed before an appointment (one or more tasks) can start at this location. This duration is needed once per stop whenever tasks are executed. (default to 0).</param>
        /// <param name="timeSlots">A list of time intervals that describe when tasks can be executed at this location. Consecutive tasks with the same time slot are grouped to an appointment. The timings of the appointment must satisfy the restrictions of the time slot. When omitted or empty, all tasks within a stop at this location will be grouped into one appointment and the timings of this appointment are unrestricted..</param>
        /// <param name="concurrency">concurrency.</param>
        public RouteOptimizationStopProperties(int? preparationDuration = 0, List<RouteOptimizationTimeSlot> timeSlots = default(List<RouteOptimizationTimeSlot>), RouteOptimizationStopConcurrency concurrency = default(RouteOptimizationStopConcurrency))
        {
            // use default value if no "preparationDuration" provided
            this.PreparationDuration = preparationDuration ?? 0;
            this.TimeSlots = timeSlots;
            this.Concurrency = concurrency;
        }

        /// <summary>
        /// Defines a duration [s] that is needed before an appointment (one or more tasks) can start at this location. This duration is needed once per stop whenever tasks are executed.
        /// </summary>
        /// <value>Defines a duration [s] that is needed before an appointment (one or more tasks) can start at this location. This duration is needed once per stop whenever tasks are executed.</value>
        /// <example>900</example>
        [DataMember(Name = "preparationDuration", EmitDefaultValue = true)]
        public int? PreparationDuration { get; set; }

        /// <summary>
        /// A list of time intervals that describe when tasks can be executed at this location. Consecutive tasks with the same time slot are grouped to an appointment. The timings of the appointment must satisfy the restrictions of the time slot. When omitted or empty, all tasks within a stop at this location will be grouped into one appointment and the timings of this appointment are unrestricted.
        /// </summary>
        /// <value>A list of time intervals that describe when tasks can be executed at this location. Consecutive tasks with the same time slot are grouped to an appointment. The timings of the appointment must satisfy the restrictions of the time slot. When omitted or empty, all tasks within a stop at this location will be grouped into one appointment and the timings of this appointment are unrestricted.</value>
        [DataMember(Name = "timeSlots", EmitDefaultValue = false)]
        public List<RouteOptimizationTimeSlot> TimeSlots { get; set; }

        /// <summary>
        /// Gets or Sets Concurrency
        /// </summary>
        [DataMember(Name = "concurrency", EmitDefaultValue = false)]
        public RouteOptimizationStopConcurrency Concurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationStopProperties {\n");
            sb.Append("  PreparationDuration: ").Append(PreparationDuration).Append("\n");
            sb.Append("  TimeSlots: ").Append(TimeSlots).Append("\n");
            sb.Append("  Concurrency: ").Append(Concurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PreparationDuration (int?) minimum
            if (this.PreparationDuration < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreparationDuration, must be a value greater than or equal to 0.", new [] { "PreparationDuration" });
            }

            yield break;
        }
    }

}
