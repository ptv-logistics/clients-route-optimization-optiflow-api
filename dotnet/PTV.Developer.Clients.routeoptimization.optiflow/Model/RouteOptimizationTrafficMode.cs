/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// Defines the traffic situation that should be considered when calculating routes. * &#x60;CONSTANT&#x60; - Describes a situation where travel times stay the same, no matter the departure time.  In this scenario, traffic conditions are assumed to be steady, unaffected by rush hours, events, or other temporary changes in congestion. * &#x60;AVERAGE&#x60; - Describes a situation where travel times fluctuate, depending on the departure time. In this scenario, a typical traffic situation for that time of day and day of week will be considered such as the rush-hour on Monday morning or light traffic on Saturday evening. This traffic situation is only supported in Belgium (BE), Switzerland (CH), Czechia (CZ), Germany (DE), Spain (ES), France (FR), United Kingdom (GB), Italy (IT), Liechtenstein (LI), Luxembourg (LU), The Netherlands (NL), Vatican City (VA) and Australia (AU) and for the routing profiles &#x60;EUR_VAN&#x60;, &#x60;EUR_TRUCK_11_99T&#x60;, &#x60;EUR_TRUCK_40T&#x60;, &#x60;AUS_LCV_LIGHT_COMMERCIAL&#x60;, &#x60;AUS_MR_MEDIUM_RIGID&#x60; and &#x60;AUS_HR_HEAVY_RIGID&#x60;. The spherical distance between any two locations should be at most 650 kilometers when using the &#x60;AVERAGE&#x60; traffic situation. Moreover, the planning horizon for this combination of routing profile and traffic mode should be at most 2 days. The planning horizon is the difference between the maximum of the latest end time and the minimum of the earliest start time of the vehicles using this combination.
    /// </summary>
    /// <value>Defines the traffic situation that should be considered when calculating routes. * &#x60;CONSTANT&#x60; - Describes a situation where travel times stay the same, no matter the departure time.  In this scenario, traffic conditions are assumed to be steady, unaffected by rush hours, events, or other temporary changes in congestion. * &#x60;AVERAGE&#x60; - Describes a situation where travel times fluctuate, depending on the departure time. In this scenario, a typical traffic situation for that time of day and day of week will be considered such as the rush-hour on Monday morning or light traffic on Saturday evening. This traffic situation is only supported in Belgium (BE), Switzerland (CH), Czechia (CZ), Germany (DE), Spain (ES), France (FR), United Kingdom (GB), Italy (IT), Liechtenstein (LI), Luxembourg (LU), The Netherlands (NL), Vatican City (VA) and Australia (AU) and for the routing profiles &#x60;EUR_VAN&#x60;, &#x60;EUR_TRUCK_11_99T&#x60;, &#x60;EUR_TRUCK_40T&#x60;, &#x60;AUS_LCV_LIGHT_COMMERCIAL&#x60;, &#x60;AUS_MR_MEDIUM_RIGID&#x60; and &#x60;AUS_HR_HEAVY_RIGID&#x60;. The spherical distance between any two locations should be at most 650 kilometers when using the &#x60;AVERAGE&#x60; traffic situation. Moreover, the planning horizon for this combination of routing profile and traffic mode should be at most 2 days. The planning horizon is the difference between the maximum of the latest end time and the minimum of the earliest start time of the vehicles using this combination.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RouteOptimizationTrafficMode
    {
        /// <summary>
        /// Enum CONSTANT for value: CONSTANT
        /// </summary>
        [EnumMember(Value = "CONSTANT")]
        CONSTANT = 1,

        /// <summary>
        /// Enum AVERAGE for value: AVERAGE
        /// </summary>
        [EnumMember(Value = "AVERAGE")]
        AVERAGE = 2
    }

}
