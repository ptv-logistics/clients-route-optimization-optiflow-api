/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// Specifies an increased cost per hour if the route duration exceeds a threshold.
    /// </summary>
    [DataContract(Name = "OvertimeCost")]
    public partial class RouteOptimizationOvertimeCost : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationOvertimeCost" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteOptimizationOvertimeCost() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationOvertimeCost" /> class.
        /// </summary>
        /// <param name="threshold">The threshold for the route duration [s] above which the extra cost per hour applies. (required).</param>
        /// <param name="extraPerHour">Specifies the extra cost for every hour above the threshold. (required).</param>
        public RouteOptimizationOvertimeCost(int? threshold = default(int?), double? extraPerHour = default(double?))
        {
            // to ensure "threshold" is required (not null)
            if (threshold == null)
            {
                throw new ArgumentNullException("threshold is a required property for RouteOptimizationOvertimeCost and cannot be null");
            }
            this.Threshold = threshold;
            // to ensure "extraPerHour" is required (not null)
            if (extraPerHour == null)
            {
                throw new ArgumentNullException("extraPerHour is a required property for RouteOptimizationOvertimeCost and cannot be null");
            }
            this.ExtraPerHour = extraPerHour;
        }

        /// <summary>
        /// The threshold for the route duration [s] above which the extra cost per hour applies.
        /// </summary>
        /// <value>The threshold for the route duration [s] above which the extra cost per hour applies.</value>
        [DataMember(Name = "threshold", IsRequired = true, EmitDefaultValue = true)]
        public int? Threshold { get; set; }

        /// <summary>
        /// Specifies the extra cost for every hour above the threshold.
        /// </summary>
        /// <value>Specifies the extra cost for every hour above the threshold.</value>
        [DataMember(Name = "extraPerHour", IsRequired = true, EmitDefaultValue = true)]
        public double? ExtraPerHour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationOvertimeCost {\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  ExtraPerHour: ").Append(ExtraPerHour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Threshold (int?) minimum
            if (this.Threshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Threshold, must be a value greater than or equal to 0.", new [] { "Threshold" });
            }

            // ExtraPerHour (double?) minimum
            if (this.ExtraPerHour < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExtraPerHour, must be a value greater than or equal to 0.", new [] { "ExtraPerHour" });
            }

            yield break;
        }
    }

}
