/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.12
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// A route is a sequence of tasks assigned to a vehicle.
    /// </summary>
    [DataContract(Name = "Route")]
    public partial class RouteOptimizationRoute : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationRoute" /> class.
        /// </summary>
        /// <param name="vehicleId">The unique identifier of the vehicle assigned to the route..</param>
        /// <param name="start">start.</param>
        /// <param name="stops">The list of stops scheduled on the route. A stop describes the visit of a location on a route where one or more tasks are scheduled. Its approach describes how to reach the location from the previous location visited on the route. Consecutive tasks are grouped to an appointment if they are assigned to the same time slot. Consecutive appointments are grouped as a stop if they are scheduled at the same location..</param>
        /// <param name="end">end.</param>
        /// <param name="metrics">metrics.</param>
        public RouteOptimizationRoute(string vehicleId = default(string), RouteOptimizationRouteStart start = default(RouteOptimizationRouteStart), List<RouteOptimizationStop> stops = default(List<RouteOptimizationStop>), RouteOptimizationRouteEnd end = default(RouteOptimizationRouteEnd), RouteOptimizationRouteMetrics metrics = default(RouteOptimizationRouteMetrics))
        {
            this.VehicleId = vehicleId;
            this.Start = start;
            this.Stops = stops;
            this.End = end;
            this.Metrics = metrics;
        }

        /// <summary>
        /// The unique identifier of the vehicle assigned to the route.
        /// </summary>
        /// <value>The unique identifier of the vehicle assigned to the route.</value>
        /// <example>VEHICLE-123</example>
        [DataMember(Name = "vehicleId", EmitDefaultValue = true)]
        public string VehicleId { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public RouteOptimizationRouteStart Start { get; set; }

        /// <summary>
        /// The list of stops scheduled on the route. A stop describes the visit of a location on a route where one or more tasks are scheduled. Its approach describes how to reach the location from the previous location visited on the route. Consecutive tasks are grouped to an appointment if they are assigned to the same time slot. Consecutive appointments are grouped as a stop if they are scheduled at the same location.
        /// </summary>
        /// <value>The list of stops scheduled on the route. A stop describes the visit of a location on a route where one or more tasks are scheduled. Its approach describes how to reach the location from the previous location visited on the route. Consecutive tasks are grouped to an appointment if they are assigned to the same time slot. Consecutive appointments are grouped as a stop if they are scheduled at the same location.</value>
        [DataMember(Name = "stops", EmitDefaultValue = false)]
        public List<RouteOptimizationStop> Stops { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public RouteOptimizationRouteEnd End { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public RouteOptimizationRouteMetrics Metrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationRoute {\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Stops: ").Append(Stops).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // VehicleId (string) maxLength
            if (this.VehicleId != null && this.VehicleId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleId, length must be less than 36.", new [] { "VehicleId" });
            }

            // VehicleId (string) minLength
            if (this.VehicleId != null && this.VehicleId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleId, length must be greater than 1.", new [] { "VehicleId" });
            }

            if (this.VehicleId != null) {
                // VehicleId (string) pattern
                Regex regexVehicleId = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
                if (!regexVehicleId.Match(this.VehicleId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleId, must match a pattern of " + regexVehicleId, new [] { "VehicleId" });
                }
            }

            yield break;
        }
    }

}
