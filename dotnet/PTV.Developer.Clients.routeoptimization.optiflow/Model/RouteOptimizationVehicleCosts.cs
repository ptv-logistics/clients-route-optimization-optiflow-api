/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.12
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// Defines the costs for using the vehicle to execute tasks.
    /// </summary>
    [DataContract(Name = "VehicleCosts")]
    public partial class RouteOptimizationVehicleCosts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationVehicleCosts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteOptimizationVehicleCosts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationVehicleCosts" /> class.
        /// </summary>
        /// <param name="perHour">Specifies the cost for every hour the vehicle is used. (required).</param>
        /// <param name="perKilometer">Specifies the cost for every kilometer driven with the vehicle. (required).</param>
        /// <param name="varFixed">Specifies the fixed cost for assigning a route to the vehicle. (default to 0D).</param>
        /// <param name="overtimes">A list of overtime costs that describe an increasing cost if the route duration goes above a threshold..</param>
        public RouteOptimizationVehicleCosts(double? perHour = default(double?), double? perKilometer = default(double?), double? varFixed = 0D, List<RouteOptimizationOvertimeCost> overtimes = default(List<RouteOptimizationOvertimeCost>))
        {
            // to ensure "perHour" is required (not null)
            if (perHour == null)
            {
                throw new ArgumentNullException("perHour is a required property for RouteOptimizationVehicleCosts and cannot be null");
            }
            this.PerHour = perHour;
            // to ensure "perKilometer" is required (not null)
            if (perKilometer == null)
            {
                throw new ArgumentNullException("perKilometer is a required property for RouteOptimizationVehicleCosts and cannot be null");
            }
            this.PerKilometer = perKilometer;
            // use default value if no "varFixed" provided
            this.Fixed = varFixed ?? 0D;
            this.Overtimes = overtimes;
        }

        /// <summary>
        /// Specifies the cost for every hour the vehicle is used.
        /// </summary>
        /// <value>Specifies the cost for every hour the vehicle is used.</value>
        /// <example>40</example>
        [DataMember(Name = "perHour", IsRequired = true, EmitDefaultValue = true)]
        public double? PerHour { get; set; }

        /// <summary>
        /// Specifies the cost for every kilometer driven with the vehicle.
        /// </summary>
        /// <value>Specifies the cost for every kilometer driven with the vehicle.</value>
        /// <example>0.5</example>
        [DataMember(Name = "perKilometer", IsRequired = true, EmitDefaultValue = true)]
        public double? PerKilometer { get; set; }

        /// <summary>
        /// Specifies the fixed cost for assigning a route to the vehicle.
        /// </summary>
        /// <value>Specifies the fixed cost for assigning a route to the vehicle.</value>
        /// <example>100</example>
        [DataMember(Name = "fixed", EmitDefaultValue = true)]
        public double? Fixed { get; set; }

        /// <summary>
        /// A list of overtime costs that describe an increasing cost if the route duration goes above a threshold.
        /// </summary>
        /// <value>A list of overtime costs that describe an increasing cost if the route duration goes above a threshold.</value>
        [DataMember(Name = "overtimes", EmitDefaultValue = false)]
        public List<RouteOptimizationOvertimeCost> Overtimes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationVehicleCosts {\n");
            sb.Append("  PerHour: ").Append(PerHour).Append("\n");
            sb.Append("  PerKilometer: ").Append(PerKilometer).Append("\n");
            sb.Append("  Fixed: ").Append(Fixed).Append("\n");
            sb.Append("  Overtimes: ").Append(Overtimes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PerHour (double?) minimum
            if (this.PerHour < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerHour, must be a value greater than or equal to 0.", new [] { "PerHour" });
            }

            // PerKilometer (double?) minimum
            if (this.PerKilometer < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerKilometer, must be a value greater than or equal to 0.", new [] { "PerKilometer" });
            }

            // Fixed (double?) minimum
            if (this.Fixed < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fixed, must be a value greater than or equal to 0.", new [] { "Fixed" });
            }

            yield break;
        }
    }

}
