/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// The request data needed to start an optimization.
    /// </summary>
    [DataContract(Name = "OptimizationRequest")]
    public partial class RouteOptimizationOptimizationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationOptimizationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteOptimizationOptimizationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationOptimizationRequest" /> class.
        /// </summary>
        /// <param name="settings">settings (required).</param>
        /// <param name="locations">A list of locations where goods have to be picked up or delivered, or where vehicles are located. Please note that the upper bound on number of locations is a technical limit. Check your individual price plan or contract to see which limits apply. (required).</param>
        /// <param name="orders">orders (required).</param>
        /// <param name="vehicles">A list of vehicles that can be used by optimization to schedule routes. Optimization can only assign a single route to a vehicle and must respect the properties and constraints of the vehicle. Please note that the upper bound on number of vehicles is a technical limit. Check your individual price plan or contract to see which limits apply. (required).</param>
        /// <param name="depots">A list of depots where pickup orders can be delivered to or delivery orders can be picked up from. When providing pickup or delivery orders, at least one depot must be specified. Depots must not be specified when all orders are pickup-delivery orders. When stopping at a depot, all pickup orders present in the vehicle are unloaded first. Afterwards, delivery orders can be loaded into the vehicle. Those must be delivered before stopping at the next depot..</param>
        /// <param name="routes">A list of routes that should be reconstructed prior to optimization. Reconstruction ensures all constraints are met and may involve removing orders, changing breaks, or adjusting the start time of the route. After the reconstruction, the optimization will try to improve the routes. The structure of the routes can be changed by the optimization as long as the constraints are satisfied. Check your individual price plan or contract to see whether or not the request may contain routes..</param>
        /// <param name="constraints">constraints.</param>
        /// <param name="rules">rules.</param>
        public RouteOptimizationOptimizationRequest(RouteOptimizationOptimizationSettings settings = default(RouteOptimizationOptimizationSettings), List<RouteOptimizationLocation> locations = default(List<RouteOptimizationLocation>), RouteOptimizationOrders orders = default(RouteOptimizationOrders), List<RouteOptimizationVehicle> vehicles = default(List<RouteOptimizationVehicle>), List<RouteOptimizationDepot> depots = default(List<RouteOptimizationDepot>), List<RouteOptimizationRouteStructure> routes = default(List<RouteOptimizationRouteStructure>), RouteOptimizationConstraints constraints = default(RouteOptimizationConstraints), RouteOptimizationRules rules = default(RouteOptimizationRules))
        {
            // to ensure "settings" is required (not null)
            if (settings == null)
            {
                throw new ArgumentNullException("settings is a required property for RouteOptimizationOptimizationRequest and cannot be null");
            }
            this.Settings = settings;
            // to ensure "locations" is required (not null)
            if (locations == null)
            {
                throw new ArgumentNullException("locations is a required property for RouteOptimizationOptimizationRequest and cannot be null");
            }
            this.Locations = locations;
            // to ensure "orders" is required (not null)
            if (orders == null)
            {
                throw new ArgumentNullException("orders is a required property for RouteOptimizationOptimizationRequest and cannot be null");
            }
            this.Orders = orders;
            // to ensure "vehicles" is required (not null)
            if (vehicles == null)
            {
                throw new ArgumentNullException("vehicles is a required property for RouteOptimizationOptimizationRequest and cannot be null");
            }
            this.Vehicles = vehicles;
            this.Depots = depots;
            this.Routes = routes;
            this.Constraints = constraints;
            this.Rules = rules;
        }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "settings", IsRequired = true, EmitDefaultValue = true)]
        public RouteOptimizationOptimizationSettings Settings { get; set; }

        /// <summary>
        /// A list of locations where goods have to be picked up or delivered, or where vehicles are located. Please note that the upper bound on number of locations is a technical limit. Check your individual price plan or contract to see which limits apply.
        /// </summary>
        /// <value>A list of locations where goods have to be picked up or delivered, or where vehicles are located. Please note that the upper bound on number of locations is a technical limit. Check your individual price plan or contract to see which limits apply.</value>
        [DataMember(Name = "locations", IsRequired = true, EmitDefaultValue = true)]
        public List<RouteOptimizationLocation> Locations { get; set; }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name = "orders", IsRequired = true, EmitDefaultValue = true)]
        public RouteOptimizationOrders Orders { get; set; }

        /// <summary>
        /// A list of vehicles that can be used by optimization to schedule routes. Optimization can only assign a single route to a vehicle and must respect the properties and constraints of the vehicle. Please note that the upper bound on number of vehicles is a technical limit. Check your individual price plan or contract to see which limits apply.
        /// </summary>
        /// <value>A list of vehicles that can be used by optimization to schedule routes. Optimization can only assign a single route to a vehicle and must respect the properties and constraints of the vehicle. Please note that the upper bound on number of vehicles is a technical limit. Check your individual price plan or contract to see which limits apply.</value>
        [DataMember(Name = "vehicles", IsRequired = true, EmitDefaultValue = true)]
        public List<RouteOptimizationVehicle> Vehicles { get; set; }

        /// <summary>
        /// A list of depots where pickup orders can be delivered to or delivery orders can be picked up from. When providing pickup or delivery orders, at least one depot must be specified. Depots must not be specified when all orders are pickup-delivery orders. When stopping at a depot, all pickup orders present in the vehicle are unloaded first. Afterwards, delivery orders can be loaded into the vehicle. Those must be delivered before stopping at the next depot.
        /// </summary>
        /// <value>A list of depots where pickup orders can be delivered to or delivery orders can be picked up from. When providing pickup or delivery orders, at least one depot must be specified. Depots must not be specified when all orders are pickup-delivery orders. When stopping at a depot, all pickup orders present in the vehicle are unloaded first. Afterwards, delivery orders can be loaded into the vehicle. Those must be delivered before stopping at the next depot.</value>
        [DataMember(Name = "depots", EmitDefaultValue = false)]
        public List<RouteOptimizationDepot> Depots { get; set; }

        /// <summary>
        /// A list of routes that should be reconstructed prior to optimization. Reconstruction ensures all constraints are met and may involve removing orders, changing breaks, or adjusting the start time of the route. After the reconstruction, the optimization will try to improve the routes. The structure of the routes can be changed by the optimization as long as the constraints are satisfied. Check your individual price plan or contract to see whether or not the request may contain routes.
        /// </summary>
        /// <value>A list of routes that should be reconstructed prior to optimization. Reconstruction ensures all constraints are met and may involve removing orders, changing breaks, or adjusting the start time of the route. After the reconstruction, the optimization will try to improve the routes. The structure of the routes can be changed by the optimization as long as the constraints are satisfied. Check your individual price plan or contract to see whether or not the request may contain routes.</value>
        [DataMember(Name = "routes", EmitDefaultValue = false)]
        public List<RouteOptimizationRouteStructure> Routes { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public RouteOptimizationConstraints Constraints { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name = "rules", EmitDefaultValue = false)]
        public RouteOptimizationRules Rules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationOptimizationRequest {\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Vehicles: ").Append(Vehicles).Append("\n");
            sb.Append("  Depots: ").Append(Depots).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
