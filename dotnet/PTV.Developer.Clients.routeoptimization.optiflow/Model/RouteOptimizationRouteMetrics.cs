/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.optiflow.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Model
{
    /// <summary>
    /// Metrics providing insights into the route.
    /// </summary>
    [DataContract(Name = "RouteMetrics")]
    public partial class RouteOptimizationRouteMetrics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteOptimizationRouteMetrics" /> class.
        /// </summary>
        /// <param name="numberOfStops">The number of stops in the route.A stop is a visit at a location where one or more tasks are executed..</param>
        /// <param name="cost">The cost of the route. This includes the cost per hour, cost per kilometer and fixed cost of the vehicle..</param>
        /// <param name="distance">The distance [m] travelled on the route..</param>
        /// <param name="duration">The duration [s] of the route from start to end..</param>
        public RouteOptimizationRouteMetrics(int? numberOfStops = default(int?), double? cost = default(double?), int? distance = default(int?), int? duration = default(int?))
        {
            this.NumberOfStops = numberOfStops;
            this.Cost = cost;
            this.Distance = distance;
            this.Duration = duration;
        }

        /// <summary>
        /// The number of stops in the route.A stop is a visit at a location where one or more tasks are executed.
        /// </summary>
        /// <value>The number of stops in the route.A stop is a visit at a location where one or more tasks are executed.</value>
        /// <example>8</example>
        [DataMember(Name = "numberOfStops", EmitDefaultValue = true)]
        public int? NumberOfStops { get; set; }

        /// <summary>
        /// The cost of the route. This includes the cost per hour, cost per kilometer and fixed cost of the vehicle.
        /// </summary>
        /// <value>The cost of the route. This includes the cost per hour, cost per kilometer and fixed cost of the vehicle.</value>
        /// <example>235.23</example>
        [DataMember(Name = "cost", EmitDefaultValue = true)]
        public double? Cost { get; set; }

        /// <summary>
        /// The distance [m] travelled on the route.
        /// </summary>
        /// <value>The distance [m] travelled on the route.</value>
        /// <example>123456</example>
        [DataMember(Name = "distance", EmitDefaultValue = true)]
        public int? Distance { get; set; }

        /// <summary>
        /// The duration [s] of the route from start to end.
        /// </summary>
        /// <value>The duration [s] of the route from start to end.</value>
        /// <example>25973</example>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public int? Duration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteOptimizationRouteMetrics {\n");
            sb.Append("  NumberOfStops: ").Append(NumberOfStops).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfStops (int?) minimum
            if (this.NumberOfStops < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfStops, must be a value greater than or equal to 0.", new [] { "NumberOfStops" });
            }

            // Distance (int?) minimum
            if (this.Distance < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Distance, must be a value greater than or equal to 0.", new [] { "Distance" });
            }

            // Duration (int?) minimum
            if (this.Duration < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Duration, must be a value greater than or equal to 0.", new [] { "Duration" });
            }

            yield break;
        }
    }

}
