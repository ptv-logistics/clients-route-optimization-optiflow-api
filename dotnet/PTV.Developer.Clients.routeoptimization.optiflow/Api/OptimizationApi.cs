/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.routeoptimization.optiflow.Client;
using PTV.Developer.Clients.routeoptimization.optiflow.Model;

namespace PTV.Developer.Clients.routeoptimization.optiflow.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptimizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the current result of the optimization. While the optimization is running, this will return intermediate metrics to track the progress. Once succeeded, the optimized routes are returned.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RouteOptimizationOptimizationResult</returns>
        RouteOptimizationOptimizationResult GetOptimizationResult(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the current result of the optimization. While the optimization is running, this will return intermediate metrics to track the progress. Once succeeded, the optimized routes are returned.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RouteOptimizationOptimizationResult</returns>
        ApiResponse<RouteOptimizationOptimizationResult> GetOptimizationResultWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates a cost-minimizing optimization that efficiently schedules orders onto routes. The routes are assigned to the provided vehicles and satisfy the given constraints. Once the optimization is accepted, the optimization starts for the requested duration after which the resulting routes can be retrieved.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeOptimizationOptimizationRequest">The data needed to optimize the routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RouteOptimizationOptimizationIdentifier</returns>
        RouteOptimizationOptimizationIdentifier StartOptimization(RouteOptimizationOptimizationRequest routeOptimizationOptimizationRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates a cost-minimizing optimization that efficiently schedules orders onto routes. The routes are assigned to the provided vehicles and satisfy the given constraints. Once the optimization is accepted, the optimization starts for the requested duration after which the resulting routes can be retrieved.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeOptimizationOptimizationRequest">The data needed to optimize the routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RouteOptimizationOptimizationIdentifier</returns>
        ApiResponse<RouteOptimizationOptimizationIdentifier> StartOptimizationWithHttpInfo(RouteOptimizationOptimizationRequest routeOptimizationOptimizationRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stops an optimization. Once accepted, the optimization will stop as soon as possible and the final state of the routes can be retrieved.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StopOptimization(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stops an optimization. Once accepted, the optimization will stop as soon as possible and the final state of the routes can be retrieved.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StopOptimizationWithHttpInfo(Guid? id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptimizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the current result of the optimization. While the optimization is running, this will return intermediate metrics to track the progress. Once succeeded, the optimized routes are returned.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RouteOptimizationOptimizationResult</returns>
        System.Threading.Tasks.Task<RouteOptimizationOptimizationResult> GetOptimizationResultAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the current result of the optimization. While the optimization is running, this will return intermediate metrics to track the progress. Once succeeded, the optimized routes are returned.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RouteOptimizationOptimizationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RouteOptimizationOptimizationResult>> GetOptimizationResultWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates a cost-minimizing optimization that efficiently schedules orders onto routes. The routes are assigned to the provided vehicles and satisfy the given constraints. Once the optimization is accepted, the optimization starts for the requested duration after which the resulting routes can be retrieved.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeOptimizationOptimizationRequest">The data needed to optimize the routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RouteOptimizationOptimizationIdentifier</returns>
        System.Threading.Tasks.Task<RouteOptimizationOptimizationIdentifier> StartOptimizationAsync(RouteOptimizationOptimizationRequest routeOptimizationOptimizationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates a cost-minimizing optimization that efficiently schedules orders onto routes. The routes are assigned to the provided vehicles and satisfy the given constraints. Once the optimization is accepted, the optimization starts for the requested duration after which the resulting routes can be retrieved.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeOptimizationOptimizationRequest">The data needed to optimize the routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RouteOptimizationOptimizationIdentifier)</returns>
        System.Threading.Tasks.Task<ApiResponse<RouteOptimizationOptimizationIdentifier>> StartOptimizationWithHttpInfoAsync(RouteOptimizationOptimizationRequest routeOptimizationOptimizationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stops an optimization. Once accepted, the optimization will stop as soon as possible and the final state of the routes can be retrieved.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StopOptimizationAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stops an optimization. Once accepted, the optimization will stop as soon as possible and the final state of the routes can be retrieved.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StopOptimizationWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptimizationApi : IOptimizationApiSync, IOptimizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OptimizationApi : IOptimizationApi
    {
        private PTV.Developer.Clients.routeoptimization.optiflow.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptimizationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptimizationApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.routeoptimization.optiflow.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.routeoptimization.optiflow.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.routeoptimization.optiflow.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.routeoptimization.optiflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OptimizationApi(PTV.Developer.Clients.routeoptimization.optiflow.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.routeoptimization.optiflow.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.routeoptimization.optiflow.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.routeoptimization.optiflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OptimizationApi(PTV.Developer.Clients.routeoptimization.optiflow.Client.ISynchronousClient client, PTV.Developer.Clients.routeoptimization.optiflow.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.routeoptimization.optiflow.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.routeoptimization.optiflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.routeoptimization.optiflow.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.routeoptimization.optiflow.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.routeoptimization.optiflow.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.routeoptimization.optiflow.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieves the current result of the optimization. While the optimization is running, this will return intermediate metrics to track the progress. Once succeeded, the optimized routes are returned.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RouteOptimizationOptimizationResult</returns>
        public RouteOptimizationOptimizationResult GetOptimizationResult(Guid? id, int operationIndex = 0)
        {
            PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<RouteOptimizationOptimizationResult> localVarResponse = GetOptimizationResultWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the current result of the optimization. While the optimization is running, this will return intermediate metrics to track the progress. Once succeeded, the optimized routes are returned.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RouteOptimizationOptimizationResult</returns>
        public PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<RouteOptimizationOptimizationResult> GetOptimizationResultWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException(400, "Missing required parameter 'id' when calling OptimizationApi->GetOptimizationResult");
            }

            PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OptimizationApi.GetOptimizationResult";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RouteOptimizationOptimizationResult>("/optimizations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the current result of the optimization. While the optimization is running, this will return intermediate metrics to track the progress. Once succeeded, the optimized routes are returned.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RouteOptimizationOptimizationResult</returns>
        public async System.Threading.Tasks.Task<RouteOptimizationOptimizationResult> GetOptimizationResultAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<RouteOptimizationOptimizationResult> localVarResponse = await GetOptimizationResultWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the current result of the optimization. While the optimization is running, this will return intermediate metrics to track the progress. Once succeeded, the optimized routes are returned.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RouteOptimizationOptimizationResult)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<RouteOptimizationOptimizationResult>> GetOptimizationResultWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException(400, "Missing required parameter 'id' when calling OptimizationApi->GetOptimizationResult");
            }


            PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OptimizationApi.GetOptimizationResult";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RouteOptimizationOptimizationResult>("/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initiates a cost-minimizing optimization that efficiently schedules orders onto routes. The routes are assigned to the provided vehicles and satisfy the given constraints. Once the optimization is accepted, the optimization starts for the requested duration after which the resulting routes can be retrieved.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeOptimizationOptimizationRequest">The data needed to optimize the routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RouteOptimizationOptimizationIdentifier</returns>
        public RouteOptimizationOptimizationIdentifier StartOptimization(RouteOptimizationOptimizationRequest routeOptimizationOptimizationRequest, int operationIndex = 0)
        {
            PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<RouteOptimizationOptimizationIdentifier> localVarResponse = StartOptimizationWithHttpInfo(routeOptimizationOptimizationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Initiates a cost-minimizing optimization that efficiently schedules orders onto routes. The routes are assigned to the provided vehicles and satisfy the given constraints. Once the optimization is accepted, the optimization starts for the requested duration after which the resulting routes can be retrieved.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeOptimizationOptimizationRequest">The data needed to optimize the routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RouteOptimizationOptimizationIdentifier</returns>
        public PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<RouteOptimizationOptimizationIdentifier> StartOptimizationWithHttpInfo(RouteOptimizationOptimizationRequest routeOptimizationOptimizationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'routeOptimizationOptimizationRequest' is set
            if (routeOptimizationOptimizationRequest == null)
            {
                throw new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException(400, "Missing required parameter 'routeOptimizationOptimizationRequest' when calling OptimizationApi->StartOptimization");
            }

            PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = routeOptimizationOptimizationRequest;

            localVarRequestOptions.Operation = "OptimizationApi.StartOptimization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RouteOptimizationOptimizationIdentifier>("/optimizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartOptimization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initiates a cost-minimizing optimization that efficiently schedules orders onto routes. The routes are assigned to the provided vehicles and satisfy the given constraints. Once the optimization is accepted, the optimization starts for the requested duration after which the resulting routes can be retrieved.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeOptimizationOptimizationRequest">The data needed to optimize the routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RouteOptimizationOptimizationIdentifier</returns>
        public async System.Threading.Tasks.Task<RouteOptimizationOptimizationIdentifier> StartOptimizationAsync(RouteOptimizationOptimizationRequest routeOptimizationOptimizationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<RouteOptimizationOptimizationIdentifier> localVarResponse = await StartOptimizationWithHttpInfoAsync(routeOptimizationOptimizationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Initiates a cost-minimizing optimization that efficiently schedules orders onto routes. The routes are assigned to the provided vehicles and satisfy the given constraints. Once the optimization is accepted, the optimization starts for the requested duration after which the resulting routes can be retrieved.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeOptimizationOptimizationRequest">The data needed to optimize the routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RouteOptimizationOptimizationIdentifier)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<RouteOptimizationOptimizationIdentifier>> StartOptimizationWithHttpInfoAsync(RouteOptimizationOptimizationRequest routeOptimizationOptimizationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'routeOptimizationOptimizationRequest' is set
            if (routeOptimizationOptimizationRequest == null)
            {
                throw new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException(400, "Missing required parameter 'routeOptimizationOptimizationRequest' when calling OptimizationApi->StartOptimization");
            }


            PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = routeOptimizationOptimizationRequest;

            localVarRequestOptions.Operation = "OptimizationApi.StartOptimization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RouteOptimizationOptimizationIdentifier>("/optimizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartOptimization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Stops an optimization. Once accepted, the optimization will stop as soon as possible and the final state of the routes can be retrieved.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StopOptimization(Guid? id, int operationIndex = 0)
        {
            StopOptimizationWithHttpInfo(id);
        }

        /// <summary>
        ///  Stops an optimization. Once accepted, the optimization will stop as soon as possible and the final state of the routes can be retrieved.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<Object> StopOptimizationWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException(400, "Missing required parameter 'id' when calling OptimizationApi->StopOptimization");
            }

            PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OptimizationApi.StopOptimization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/optimizations/{id}/stop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopOptimization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Stops an optimization. Once accepted, the optimization will stop as soon as possible and the final state of the routes can be retrieved.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StopOptimizationAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StopOptimizationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Stops an optimization. Once accepted, the optimization will stop as soon as possible and the final state of the routes can be retrieved.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier of the optimization.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiResponse<Object>> StopOptimizationWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.routeoptimization.optiflow.Client.ApiException(400, "Missing required parameter 'id' when calling OptimizationApi->StopOptimization");
            }


            PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.optiflow.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.routeoptimization.optiflow.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OptimizationApi.StopOptimization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/optimizations/{id}/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopOptimization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
